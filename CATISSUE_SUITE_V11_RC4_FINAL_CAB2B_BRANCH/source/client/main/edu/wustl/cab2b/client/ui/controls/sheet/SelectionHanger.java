/*L
 * Copyright Georgetown University.
 *
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/cab2b/LICENSE.txt for details.
 */

/*
 * SelectionHanger.java
 *
 * Created on November 13, 2007, 6:08 PM
 */
package edu.wustl.cab2b.client.ui.controls.sheet;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.Toolkit;

import javax.swing.JFrame;

/**
 *
 * @author  jasbir_sachdeva
 */
public class SelectionHanger extends javax.swing.JPanel {

    double cH;
    double cW;
    //Path2D hanger;
    Color hangerFillColor = new Color(100, 100, 175, 100);
    Color hangerBorderColor = Color.darkGray;
    Stroke hangerBorderStroke;
    double scaleFactor = 1;
    /** Selection Hanger Paint Mode for Selection. 
     * If true, Selections will be highlighted, else it will paint itself as normal, even if table says that this cell is selected. */
    private boolean isPaintSelection = true;

    /** Creates new form SelectionHanger */
    public SelectionHanger() {
        initComponents();
        setSelected( false);

        //  Original Drawing Guidelines...
        cH = 1000;
        cW = 1000;

        reset();
    }
    
    public void setPaintSelection( boolean paintSelection){
        isPaintSelection = paintSelection;
    }
    
    public boolean isPaintSelection(){
        return isPaintSelection;
    }
            

    /**     if true, draws this buton with RAISED border.
     * @param isSelected 
     */
    public void setSelected(boolean isSelected) {
        if( isSelected && isPaintSelection)
            setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        else
            setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    }


    /**     Recomputes alll the  layout of the magnifying glass as per dimentions of this container ... */
    void reset() {
        cH = getHeight() - getInsets().top - getInsets().bottom;
        cW = getWidth() - getInsets().left - getInsets().right;

//        hanger = new Path2D.Double();
//        hanger.moveTo(cW * 1 / 4, cH * 4 / 14);
//        hanger.lineTo(cW * 3 / 4, cH * 7 / 14);
//        hanger.lineTo(cW * 1 / 4, cH * 10 / 14);
//        hanger.lineTo(cW * 1 / 4, cH * 4 / 14);

        hangerBorderStroke = new BasicStroke((float) (cH) / 100 + 1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);

        scaleFactor = getHeight() / (double) cH;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(15, 15));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        reset();
        repaint();
    }//GEN-LAST:event_formComponentResized

    @Override
    /**     Draws Magnifying glass inside the Component as per precomputed specifications...    */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        //  prepare  for high quality drawing
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2.scale(scaleFactor, scaleFactor);

        //  Drow Now...
        g2.setColor(hangerFillColor);
//        g2.fill(hanger);
        g2.setColor(hangerBorderColor);
        Stroke oldStroke = g2.getStroke();
        g2.setStroke(hangerBorderStroke);
//        g2.draw(hanger);

        //  Reset...
        g2.scale(1 / scaleFactor, 1 / scaleFactor);
        g2.setStroke(oldStroke);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        JFrame mf = new JFrame("Testing " + SelectionHanger.class.getName());

        Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
        mf.setBounds(ss.width / 8, ss.height / 8, ss.width * 6 / 8, ss.height * 6 / 8);
        mf.getContentPane().setLayout(new FlowLayout());
        SelectionHanger sh = new SelectionHanger();

        mf.getContentPane().setLayout( new BorderLayout());
        mf.getContentPane().add(sh, BorderLayout.CENTER);
        mf.setVisible(true);
    }
}
