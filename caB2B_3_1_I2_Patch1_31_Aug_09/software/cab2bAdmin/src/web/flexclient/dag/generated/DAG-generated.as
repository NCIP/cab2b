/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	
 *	Class: 		DAG
 *	Source: 	C:\Eclipse\workspace\catissuecore_Merge\flexclient\dag\DAG.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2007.09.21 11:53:37 GMT+05:30
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.HBox;
import mx.containers.Panel;
import mx.controls.Button;
import mx.core.Application;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.DragEvent;
import mx.events.FlexEvent;
import mx.styles.*;

[SWF( heightPercent='100%', widthPercent='100%')]
[Frame(extraClass="_DAG_FlexInit")]

[Frame(factoryClass="_DAG_mx_managers_SystemManager")]



public class DAG
	extends mx.core.Application
{

	[Bindable]
/**
 * @private
 **/
	public var panel1 : mx.containers.Panel;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.core.Application
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Panel
        ,
        id: "panel1"
        ,
        stylesFactory: function():void {
          this.backgroundColor = 16777215;
          this.fontSize = 11;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0,
          layout: "absolute",
          title: "Diagrammatic View",
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              stylesFactory: function():void {
                this.borderStyle = "none";
                this.paddingBottom = 5;
                this.paddingLeft = 5;
                this.paddingRight = 5;
                this.paddingTop = 5;
              }
              ,
              propertiesFactory: function():Object { return {
                width: 190,
                height: 39,
                x: 0,
                y: 0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    events: {
                      click: "___Button1_click"
                    }
                    ,
                    stylesFactory: function():void {
                      this.fontSize = 9;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Add Link"
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function DAG()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.paddingTop = 0;
			this.paddingBottom = 0;
			this.paddingLeft = 0;
			this.paddingRight = 0;
		};


		//	ambient styles
		mx_internal::_DAG_StylesInit();

		//	properties
		this.layout = "vertical";

		//	events
		this.addEventListener("dragEnter", ___Application1_dragEnter);
		this.addEventListener("dragDrop", ___Application1_dragDrop);
		this.addEventListener("creationComplete", ___Application1_creationComplete);

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}


	
	import mx.controls.ComboBase;
	import Components.DAGConstants;
	import mx.containers.HBox;
	import mx.controls.ComboBox;
    import mx.controls.ToolTip;
    import mx.managers.ToolTipManager;
	import mx.containers.VBox;
	import mx.controls.Button;
	import mx.utils.ArrayUtil;
	import mx.controls.DataGrid;
	import mx.containers.Accordion;
	import mx.controls.List;
	import Components.Association;
	import Components.IDAGPath;
	import mx.collections.ArrayCollection;
	import mx.states.SetEventHandler;
	import mx.core.UIComponent;
	import Components.DAGNode;
	import mx.containers.Canvas;
	import mx.core.IUIComponent;
	import mx.controls.Alert;
	import mx.events.DragEvent;
	import mx.core.DragSource;
	import mx.managers.DragManager;
	
	import flash.external.ExternalInterface;
	import mx.controls.Alert;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.RemoteObject;
	import mx.rpc.events.FaultEvent;
	import flash.net.registerClassAlias;
	import Components.AmbiguityPanel;
	import mx.managers.PopUpManager;
   	import mx.core.IFlexDisplayObject;
   	import mx.containers.ControlBar;
    import mx.controls.Spacer;
    import mx.containers.ControlBar;
    import Util.HashMap;
	
	public var readyTimer:Timer;
	private var dynamicNodeNum:int = 1;
	private var linkNum:int = 1;
	private var node1:String = "";
	private var node2:String = "";
	private var selectedLink:String = "";
	private var selectedNode:DAGNode=null;
	//------------------------
	private var textData:Object = null;
    private var panel:AmbiguityPanel; 
    private var title:String  = new String();
    private var selectedNodeList:ArrayCollection = new ArrayCollection();
    private var count:int = 0;
    private var resultStr:String = "failed";
    private var firstNode:String;
    private var secondNode:String;
    //private var linkCount:int =0;
	private var pathStr:String
	private	var isQuery:String = "false";
	public var isOutputView:Boolean=false;
	public var rpcService: RemoteObject;
	public var view:String ="";
	public var dagPathUIMap:HashMap;
	public var totalNodeMap:HashMap;
	
	
	
	public function timerHandler():void
	{
		if (isContainerReady())
		{
			// If the container is ready, register the SWFï¿½s functions.
			setUpCall();
			readyTimer.stop();
		}
	}

	public function setUpCall():void 
	{
		ExternalInterface.addCallback("createNode",createNode);		
		ExternalInterface.addCallback("editLimit",editLimit);	
		ExternalInterface.addCallback("searchResult",searchResult);	
		ExternalInterface.addCallback("addNodeToView",addNodeToView);
	}
	
	//setup the callback function so that HTML can call flex methods
	//Checks wheather HTML page is loaded or not.
	private function isContainerReady():Boolean
	{
		var result:Boolean = ExternalInterface.call("isReady");
		return result;
	}
		
	private function faultHandler (event:FaultEvent):void
	{
		// Deal with event.fault.faultString, etc.
		Alert.show(event.fault.faultString, 'Error');
	}
	
		//-----------------
	private function doDrag(event:MouseEvent):void
	{
		var dragInitiator:DAGNode = DAGNode(event.currentTarget);
		var ds:DragSource = new DragSource();
		
		var canvasProxy:DAGNode = new DAGNode();
		canvasProxy.nodeNumber = dragInitiator.nodeNumber;
		canvasProxy.nodeName =dragInitiator.nodeName;
		
		
		var pointOffSet:Point = new Point(dragInitiator.mouseX,dragInitiator.mouseY);
		ds.addData(pointOffSet,"point");
		
		DragManager.doDrag(dragInitiator,ds,event,canvasProxy,0,0);
	}
	
	private function doDragEnter(event:DragEvent):void{
		DragManager.acceptDragDrop(event.currentTarget as IUIComponent)
	}
	
	private function onDragDrop(event:DragEvent):void{
		var dagNode:DAGNode = DAGNode(event.dragInitiator) ;
		var pointOffSet:Point = Point(event.dragSource.dataForFormat("point") );
		
		var pt:Point = new Point(event.stageX-pointOffSet.x, event.stageY-pointOffSet.y);
		pt = panel1.globalToContent(pt);
		
		dagNode.x = pt.x;
		dagNode.y = pt.y;
		
		//positioning line
		var ass:Association;
		var inAssociations:ArrayCollection;
		var inAsslength:int;
		var outAssociations:ArrayCollection;
		var outAsslength:int;
		var displayoutAssociations:ArrayCollection=dagNode.displayoutAssociations;
		var displaylength:int=displayoutAssociations.length
		var path:IDAGPath=null;
		//Outgoing associations
		var operatorIndex:int =0; 
		outAssociations = dagNode.outAssociations;
		outAsslength = outAssociations.length;
		for(var i:int=0;i<outAsslength;i++)
		{
			ass = Association(outAssociations.getItemAt(i));
//			Alert.show("src dagnode" + dagNode.name);//src
//			Alert.show("dest dagnode" + ass.associatedNode);
//			var key:String=ass.associatedLink+"_"+dagNode.name+"_"+ass.associatedNode;
			panel1.removeChild(panel1.getChildByName(ass.associatedLink));
			path = dagPathUIMap.getValue(ass.associatedLink);
			dagPathUIMap.remove(ass.associatedLink);
			if(panel1.getChildByName(dagNode.name) == null || panel1.getChildByName(ass.associatedNode) == null)
			{
				Alert.show("Please select two nodes to link");
			}
			else
			{
				DAGNode(panel1.getChildByName(ass.associatedNode)).removeInAssociation(dagNode.name,ass.associatedLink);
				linkNodes(dagNode.name,ass.associatedNode,path);
			}
		}
		for(var j:int=0;j<outAsslength;)
		{
			outAssociations.removeItemAt(j);
			outAsslength--;
			
		}
		for(var j:int=0;j<displaylength;)
		{
			displayoutAssociations.removeItemAt(j);
			displaylength--;
			
		}
		
		//Incoming associations
		inAssociations = dagNode.inAssociations;
		inAsslength = inAssociations.length;
		for(var k:int=0;k<inAsslength;k++)
		{
			ass = Association(inAssociations.getItemAt(k));
			//Alert.show("dest dagnode" + dagNode.name);
			//Alert.show("src dagnode" + ass.associatedNode);//src
		//	var key:String=ass.associatedLink+"_"+ass.associatedNode+"_"+dagNode.name;
			panel1.removeChild(panel1.getChildByName(ass.associatedLink));
			path = dagPathUIMap.getValue(ass.associatedLink);
			dagPathUIMap.remove(ass.associatedLink);
			if(panel1.getChildByName(dagNode.name) == null || panel1.getChildByName(ass.associatedNode) == null)
			{
				Alert.show("Please select two nodes to link");
			}
			else
			{	
				DAGNode(panel1.getChildByName(ass.associatedNode)).removeDisplayOutAssociation(dagNode.name,ass.associatedLink);
				DAGNode(panel1.getChildByName(ass.associatedNode)).removeOutAssociation(dagNode.name,ass.associatedLink);
				linkNodes(ass.associatedNode,dagNode.name,path);
			}
			
		}
		for(var l:int=0;l<inAsslength;)
		{
			inAssociations.removeItemAt(l);
			inAsslength--;
		}
	}
			
	private function initFlexInterfaceHandler(event: ResultEvent):void
	{
		//Alert.show("Intialized .....")
		rpcService.removeEventListener(ResultEvent.RESULT,initFlexInterfaceHandler,false);
	}
	/**
	
	**/
	private function initApp():void
	{
		registerClassAlias("edu.wustl.catissuecore.flex.dag.DAGNode", DAGNode);
		rpcService= new RemoteObject();
		rpcService.destination="cdeService";
		isQuery =Application.application.parameters.isQuery;
		view= Application.application.parameters.view;
		dagPathUIMap = new HashMap();
		totalNodeMap = new HashMap();
		if (isContainerReady())
			{
			// If the container is ready, register the SWFï¿½s functions.
				setUpCall();
			}
			else
			{
				/* If the container is not ready, set up a Timer to call the
				container at 100ms intervals. Once the container responds that
				is ready, the timer will be stopped. */
				readyTimer = new Timer(100);
				readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				readyTimer.start();
			}
		
			if(view==DAGConstants.ADD_LIMIT_VIEW)
			{
				if(isQuery=="true")
				{
					rpcService.addEventListener(ResultEvent.RESULT,repaintHandler);
				 	rpcService.repaintDAG();
				}
				else
				{
					rpcService.initFlexInterface();
					rpcService.addEventListener(ResultEvent.RESULT,initFlexInterfaceHandler);
					rpcService.addEventListener(FaultEvent.FAULT, faultHandler);
				}
		    
			}
			else
		 	{
		 	 	rpcService.addEventListener("result",repaintHandler);
			 	rpcService.repaintDAG();
		    }
		  
	}
	
	private function repaintHandler(event: ResultEvent):void
	{
//		Alert.show("Repaint");
		var nodeList:ArrayCollection = event.result  as ArrayCollection;
		var xpos:int =0;
		var ypos:int =0;
		for(var i:int=0;i<nodeList.length;i++)
		{
			var node:DAGNode = nodeList.getItemAt(i) as DAGNode;
			node.x = node.x + (xpos + 50);
			node.y = node.y + (100);
						
			node.name =  node.expressionId+"";
			node.nodeNumber = node.expressionId+"";
			node.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
			node.addEventListener(MouseEvent.CLICK,updateNodeSelection);

			if(isQuery == "true")
			{
				if(node.nodeType==DAGConstants.CONSTRAINT_ONLY_NODE)
				{
					node.nodeColor=0xffb693;
					panel1.addChild(node);
				}
				if(node.nodeType==DAGConstants.CONSTRAINT_VIEW_NODE)
				{
					panel1.addChild(node);
				}
			}
			else
			{
				if(node.nodeType==DAGConstants.CONSTRAINT_ONLY_NODE)
				{
					node.nodeColor=0xffb693;

				}
				if(node.nodeType==DAGConstants.VIEW_ONLY_NODE)
				{
					node.nodeColor =0xff8080;
				}
				panel1.addChild(node);
			}
			totalNodeMap.put(node.name,node);
			
		}
		for(var i:int=0;i<nodeList.length;i++)
		{

			var sourceNode:DAGNode = nodeList.getItemAt(i) as DAGNode;	
			var associationList:ArrayCollection = sourceNode.associationList;
//			var pathList:ArrayCollection  = sourceNode.pathList;
			var dagPathList:ArrayCollection = sourceNode.dagpathList;
			var operatorList:ArrayCollection = sourceNode.operatorList;

			 for(var j:int=0;j<associationList.length;j++)
			 {	
			    var targetNode:DAGNode = associationList.getItemAt(j) as DAGNode;	
				var path:IDAGPath = dagPathList.getItemAt(j) as IDAGPath;
			    var operator:String = operatorList.getItemAt(j) as String;
				var operatorSelectedIndex:int=0;
			    if(operator=="OR")
			    {
			    	//operatorSelectedIndex=1;
			    	path.operatorIndex=1;
			    }
			    /*if(sourceNode.operatorArray[0]!=operator)
				{
						sourceNode.operatorArray[1]  = 	sourceNode.operatorArray[0];
						sourceNode.operatorArray[0] = operator;
				}*/
				if(isQuery == "true")
				{
	                sourceNode.enable=true;
				}
				else
				 {
	                sourceNode.enable=false;
				 }
                try
                {
					linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString(),path);
                }catch(error:TypeError)
                {
                	Alert.show("Error:"+error.message);	
                
                }
			 	
			 }
		}
		rpcService.removeEventListener(ResultEvent.RESULT,repaintHandler,false)
	}
	

	public function addNodeToView(nodesStr:String):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,repaintHandler);
		rpcService.addEventListener(ResultEvent.RESULT,addNodeToViewHandler);
		rpcService.addNodeToView(nodesStr);
	}	
		
	private function addNodeToViewHandler(event: ResultEvent):void 		
	{
		textData = event.result;
		if(textData!=null)
		{
			isOutputView = true;
			this.addNode();
		}
		rpcService.removeEventListener(ResultEvent.RESULT,addNodeToViewHandler,false);
	}
			
	public function searchResult():void
	{
		rpcService.addEventListener(ResultEvent.RESULT,searchResultHandler);
		rpcService.getSearchResult();
	}
	
	private function searchResultHandler(event: ResultEvent):void 
	{
		var status:int =event.result as int;

		if(status==DAGConstants.SUCCESS)
		{
			ExternalInterface.call("showViewSearchResultsJsp");
		}
		if(status==DAGConstants.NO_RESULT_PRESENT)
		{
//			Alert.show(DAGConstants.NO_RESULT_PRESENT_MESSAGE);
			showValidationMessagesToUser(DAGConstants.NO_RESULT_PRESENT_MESSAGE);
		}
		if(status==DAGConstants.EMPTY_DAG)
		{
			ExternalInterface.call("showErrorPage");
		}
		if(status==DAGConstants.MULTIPLE_ROOT)
		{
//			Alert.show(DAGConstants.MULTIPLE_ROOT_MESSAGE);
			showValidationMessagesToUser(DAGConstants.MULTIPLE_ROOT_MESSAGE);
		}
		if(status==DAGConstants.CLASS_NOT_FOUND)
		{
//			Alert.show(DAGConstants.GENERIC_MESSAGE);
			showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
		}
		if(status==DAGConstants.SQL_EXCEPTION)
		{
//			Alert.show(DAGConstants.GENERIC_MESSAGE);
			showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
		}
		if(status==DAGConstants.DAO_EXCEPTION)
		{
			//Alert.show(DAGConstants.GENERIC_MESSAGE);
			showValidationMessagesToUser(DAGConstants.GENERIC_MESSAGE)
		}
		if(status>DAGConstants.TREE_NODES_LIMIT)
		{
			var paramArray:Array = new Array(status);
			ExternalInterface.call("openDecisionMakingPage",paramArray);
		}
		rpcService.removeEventListener(ResultEvent.RESULT,searchResultHandler,false);
		
	}
	
	public function showValidationMessagesToUser(errorMessage:String):void
	{
		var paramArray:Array = new Array(errorMessage);
		ExternalInterface.call("showValidationMessages",paramArray);
	}
	
	public function createNode(strToCreateQueyObject:String,entityName:String):void
	{
		if(strToCreateQueyObject=="")	
		{
			showValidationMessagesToUser(DAGConstants.EMPTY_LIMIT_ERROR_MESSAGE);
		}
		else
		{
			rpcService.addEventListener(ResultEvent.RESULT,getNodeResultHandler);
			rpcService.createNode(strToCreateQueyObject,entityName);
			showValidationMessagesToUser("");
		}
	}
	
	public function linkNodesHandler(event: ResultEvent):void
	{
		var selectedList:ArrayCollection =  event.result  as  ArrayCollection;

		var path:IDAGPath =null;
		if(selectedList!=null)
		{
		//	linkCount=0;
			if(selectedList.length > 1)
			{
				Alert.show("Multiple associations not yet supoorted.");		
			}
			else
			{
				path = selectedList.getItemAt(0) as IDAGPath;
				linkNodes(firstNode,secondNode,path);
			}
		}
		else
		{
			Alert.show("No association present or no association selected.");
		}
		rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}
/*	//code for multiple association
		if(selectedList.length > 0 )
			{
				
				var numAssociation:int=selectedList.length
				for(var i:int;i<numAssociation;i++)
				{
					
					path = selectedList.getItemAt(i) as IDAGPath;
					path.operatorIndex=0;
					linkNodes(firstNode,secondNode,path);
				}
				selectedList=null;
			}
			else
			{
				path = selectedList.getItemAt(0) as IDAGPath;
				linkNodes(firstNode,secondNode,path);
			}
			//linkCount++;
		}*/

	

	public function getNodeResultHandler(event: ResultEvent):void
	{
		textData = event.result;
		if(textData!=null)
		{
			this.addNode();
		}
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
	}
	        
	private function createPopUp():void {
	    PopUpManager.addPopUp(panel,this,true);
	    PopUpManager.centerPopUp(panel);  
	    }
	

	private function addNode():void
	{
		var newNode:DAGNode = new DAGNode();
		newNode.nodeName = textData.nodeName;

		newNode.nodeType =	textData.nodeType;
		newNode.nodeNumber = textData.expressionId+"";
		newNode.expressionId=textData.expressionId;
		newNode.name = textData.expressionId+"";

		if(isOutputView)
		{
			newNode.nodeColor =0xff8080;
			newNode.toolTip="";
		}
		else
		{
			newNode.nodeColor =0xFFFFAA;
			newNode.toolTip=textData.toolTip;
		}

		newNode.addEventListener(MouseEvent.MOUSE_MOVE,doDrag);
		newNode.addEventListener(MouseEvent.CLICK,updateNodeSelection);
		newNode.dagpathList = new ArrayCollection();
		
		if(panel1.getChildren().length==1)
		{
			newNode.x = 10;
			newNode.y = (panel1.y+50);
		}
		else
		{ 
			var length:int=panel1.getChildren().length;
			newNode.x = (40*length);
			newNode.y = (panel1.y+50);
		}
	
		panel1.addChild(newNode);
		totalNodeMap.put(newNode.name,newNode);

	}
	
	private function drawLine():void{
		
		var dagNode1:DAGNode = DAGNode(panel1.getChildByName(node1));
		var dagNode2:DAGNode = DAGNode(panel1.getChildByName(node2));
			
		if(dagNode1 == null || dagNode2 == null)
		{
			Alert.show("Please select two nodes to link");
		}
		else
		{
			if(dagNode1.getOutAssociation(node2) != null)
			{
				Alert.show("An association already exists between selected nodes");
			}
			else
			{
				link(node1,node2);
			}
		}
	}
	
	public function getPathHandler(event: ResultEvent):void
	{
		try
		{
		var dagpath:IDAGPath = new IDAGPath();
		panel = new  AmbiguityPanel();
	    panel.title="Ambiguity resolver";
	    
		panel.pathList= event.result as ArrayCollection;
		if(panel.pathList==null || panel.pathList.length==0)
		{
			Alert.show("No paths present.");
		}
		else
		{
			if(panel.pathList.length>1)
			{
				panel.nodeList=selectedNodeList;
				createPopUp();
			}
			else
			{
				rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
				rpcService.addEventListener("result",linkNodesHandler);
				rpcService.linkNodes(selectedNodeList,panel.pathList);
			}
		}
		}catch(error:Error)
		{
			Alert.show("Error"+error.getStackTrace())
		}
		finally
		{
			rpcService.removeEventListener(ResultEvent.RESULT,getPathHandler,false);
		}
	}
	public function cancelHandler(nodeList:ArrayCollection):void
	{
			node1="";
			node2="";
			var dagNode1:DAGNode =nodeList[0]as DAGNode;
			var dagNode2:DAGNode =nodeList[1]as DAGNode;
			dagNode1.unSelect();
			dagNode2.unSelect();
			selectedNodeList.removeAll();
			count=0;
			rpcService.removeEventListener(ResultEvent.RESULT,linkNodesHandler,false);
	}
		
	public function link(node1:String,node2:String):void
	{
		firstNode=node1;
		secondNode=node2;
		rpcService.addEventListener("result",getPathHandler);
		rpcService.getpaths(selectedNodeList);
	}

	public function linkNodes(firstNode:String,secondNode:String,path:IDAGPath):void
	{
			var dagNode1:DAGNode = DAGNode(panel1.getChildByName(firstNode));
			var dagNode2:DAGNode = DAGNode(panel1.getChildByName(secondNode));
			if(dagNode2!=null)	
			{
				var fromX:int = dagNode1.x+dagNode1.width;
				var fromY:int = dagNode1.y+(15);
				var toX:int = dagNode2.x;
				var toY:int = dagNode2.y+(15);
				var line:Sprite = new Sprite();
				line.name="link";
						
				drawLink(line,fromX,fromY,toX,toY,0x000000);
			
				var vBox:VBox = dagNode1.getChildByName("Association") as VBox;
				vBox.visible=true;
				
				var c:UIComponent = new UIComponent();
				c.id="line"+linkNum++;
							
				if(path!=null)			
				{
					c.toolTip=path.name;
					c.name = path.id+"_"+path.sourceExpId+"_"+path.destinationExpId;
					c.addChild(line);
					panel1.addChild(c);
					dagPathUIMap.put(c.name,path);
					dagNode1.dagpathList.addItem(path);
					addEventListener(KeyboardEvent.KEY_DOWN,deletePathHandler);
					c.addEventListener(MouseEvent.MOUSE_OVER,updateLinkSelection);
	     			c.addEventListener(MouseEvent.MOUSE_OUT,updateLinkUnSelection);
				
	   			}
				
				//removing selections
				dagNode1.unSelect();
				dagNode2.unSelect();
				if(dagNode2.nodeType==DAGConstants.VIEW_ONLY_NODE)
				{
					dagNode1.addOutAssociation(secondNode,c.name,0);
					dagNode2.addInAssociation(firstNode,c.name,0);
				}
				else
				{	
					var operatorIndex:int = path.operatorIndex;
				 	dagNode1.addDisplayOutAssociation(secondNode,c.name,operatorIndex);
					dagNode1.addOutAssociation(secondNode,c.name,operatorIndex);
					dagNode2.addInAssociation(firstNode,c.name,operatorIndex);
				}
				node1="";
				node2="";
				selectedNodeList.removeAll();
				count=0;
			}
		
	}
							
	private function drawLink(line:Sprite,fromX:int,fromY:int,toX:int,toY:int,color:uint):void
	{
				var graphics:Graphics = line.graphics;
				graphics.clear();
				graphics.moveTo(fromX,fromY);
				graphics.beginFill(color)
				graphics.lineTo(toX-6,toY);
				graphics.lineStyle(2,color);
//				building arrow
				graphics.moveTo(toX,toY);
		        graphics.lineTo(toX-6,toY-3);
        		graphics.lineTo(toX-6,toY+3);
		        graphics.lineTo(toX,toY);
				graphics.endFill();
	}
	
	private function updateLinkSelection(event:MouseEvent):void {
		var link:UIComponent =panel1.getChildByName(event.currentTarget.name) as UIComponent;	
		if(link!=null)
		{
			
			if(selectedLink=="")
			{
				var line:Sprite =link.getChildByName("link") as Sprite;
				var dagPath:IDAGPath = dagPathUIMap.getValue(event.currentTarget.name);
				var dagNode1:DAGNode = DAGNode(panel1.getChildByName(dagPath.sourceExpId+""));
				var dagNode2:DAGNode = DAGNode(panel1.getChildByName(dagPath.destinationExpId+""));
				var fromX:int = dagNode1.x+dagNode1.width;
				var fromY:int = dagNode1.y+(15);
				var toX:int = dagNode2.x;
				var toY:int = dagNode2.y+(15);
				selectedLink=event.currentTarget.name;
				drawLink(line,fromX,fromY,toX,toY,0x0000ff);
			//	removeEventListener(KeyboardEvent.KEY_DOWN,deleteNodeHandler,false);
				//addEventListener(KeyboardEvent.KEY_DOWN,deletePathHandler);
			}
		}
					
	}
	
	private function updateLinkUnSelection(event:MouseEvent):void
	{
		var link:UIComponent =panel1.getChildByName(event.currentTarget.name) as UIComponent;	
		if(link!=null)
		{
			if(selectedLink==event.currentTarget.name)
			{
				var line:Sprite =link.getChildByName("link") as Sprite;
				var dagPath:IDAGPath = dagPathUIMap.getValue(selectedLink);
				var dagNode1:DAGNode = DAGNode(panel1.getChildByName(dagPath.sourceExpId+""));
				var dagNode2:DAGNode = DAGNode(panel1.getChildByName(dagPath.destinationExpId+""));
				var fromX:int = dagNode1.x+dagNode1.width;
				var fromY:int = dagNode1.y+(15);
				var toX:int = dagNode2.x;
				var toY:int = dagNode2.y+(15);
				drawLink(line,fromX,fromY,toX,toY,0x000000);
				selectedLink="";
			}
		}
	}
	private function updateNodeSelection(event:MouseEvent):void {
	selectedNode=null;
		if(event.shiftKey)
		{
			var dagNode:DAGNode = DAGNode(panel1.getChildByName(event.currentTarget.name));
			if(dagNode != null)
			{
				if(dagNode.name == node1 )
				{
					if(selectedNodeList!=null)
					{
						var index:int =node1 as int;

						if(selectedNodeList.length==2)
						{
							selectedNodeList.removeItemAt(0);
							node1=node2;
							node2="";
						}
						else
						{
							selectedNodeList.removeItemAt(0);
							node1 = "";
						}
						count--;
					
					}
					dagNode.unSelect();
	
				}
				else if(dagNode.name == node2)
				{
					if(selectedNodeList!=null)
					{
						var index:int =node2 as int;
						selectedNodeList.removeItemAt(1);
						count--;
					}
					dagNode.unSelect();
					node2 = "";
				}
				else
				{
					if(node1 == "")
					{
						node1 = event.currentTarget.name;
					}
					else
					{							
						if(node2 == "")
						{
							node2 = event.currentTarget.name;
						}
						else
						{
							DAGNode(panel1.getChildByName(node1)).unSelect();
							node1 = node2;
							node2 = event.currentTarget.name;
						}
					}
					dagNode.select();
					selectedNode = dagNode;
				//	removeEventListener(KeyboardEvent.KEY_DOWN,deletePathHandler,false);
				//	addEventListener(KeyboardEvent.KEY_DOWN,deleteNodeHandler);
							
					if(count<2)
					{
						var index:int = dagNode.name as int;
						selectedNodeList.addItem(dagNode);
					}
					count++;
				}
			}
		}
		
	}
	/*private function deleteNodeHandler(event:KeyboardEvent):void	
	{
			if(event.keyCode==Keyboard.DELETE)
			{
			if(selectedNode.name == node1 )
				{
					
					if(selectedNodeList!=null)
					{
						var index:int =node1 as int;

						if(selectedNodeList.length==2)
						{
							selectedNodeList.removeItemAt(0);
							node1=node2;
							node2="";
						}
						else
						{
							selectedNodeList.removeItemAt(0);
							node1 = "";
						}
						count--;
		
					}
					selectedNode.deleteNode();
				}
				else if(selectedNode.name == node2)
				{
					if(selectedNodeList!=null)
					{
						var index:int =node2 as int;
						selectedNodeList.removeItemAt(1);
						count--;
					}
					selectedNode.deleteNode();
					node2 = "";
				}
					
		}
		
	}*/
	
	private function deletePath(dagNode1:DAGNode,dagNode2:DAGNode):void
	{
			var ass:Association=dagNode1.getOutAssociation(node2);
			if(ass != null)
			{
				
				if(dagNode1.nodeType==DAGConstants.VIEW_ONLY_NODE)
				{
					dagNode1.removeOutAssociation(node2,ass.associatedLink);
				}
				else
				{
					dagNode1.removeDisplayOutAssociation(node2,ass.associatedLink);
					dagNode1.removeOutAssociation(node2,ass.associatedLink);
				}
				dagNode2.removeInAssociation(node1,ass.associatedLink);
				node1="";
				node2="";
				rpcService.addEventListener(ResultEvent.RESULT,deleteLinkHandler);
				var nodeList:ArrayCollection = new ArrayCollection();
				nodeList.addItemAt(dagNode1,0);
				nodeList.addItemAt(dagNode2,1);
				rpcService.deleteLink(nodeList,ass.associatedLink)
				panel1.removeChild(panel1.getChildByName(ass.associatedLink));
				dagPathUIMap.remove(selectedLink);
				selectedLink="";
			}
			else
			{
				Alert.show("Selected nodes do not have any association");
			}
	}	
	
	private function deletePathHandler(event:KeyboardEvent):void		
	{

			if(event.keyCode==Keyboard.DELETE)
			{
				var dagPath:IDAGPath = dagPathUIMap.getValue(selectedLink);
				node1=dagPath.sourceExpId+"";
				node2=dagPath.destinationExpId+"";
				var dagNode1:DAGNode = DAGNode(panel1.getChildByName(node1));
				var dagNode2:DAGNode = DAGNode(panel1.getChildByName(node2));
				if(view==DAGConstants.RESULT_VIEW)
				{
					if((dagNode1.nodeType==DAGConstants.VIEW_ONLY_NODE)||(dagNode2.nodeType==DAGConstants.VIEW_ONLY_NODE))
					{
						deletePath(dagNode1,dagNode2);
					}
					else
					{
						Alert.show("Constraint node  link cannot be deleted");
						node1="";
						node2="";
						rpcService.addEventListener(ResultEvent.RESULT,deleteLinkHandler);
					}
				}
				else
				{
					deletePath(dagNode1,dagNode2);
				}
					
			}
				
	}
	public function deleteLinkHandler(event:ResultEvent):void
	{
		rpcService.removeEventListener(ResultEvent.RESULT,deleteLinkHandler,false);
	}
	public function editNode(node:DAGNode):void
	{
		eNode=node;
		rpcService.removeEventListener(ResultEvent.RESULT,getNodeResultHandler,false);
		rpcService.getLimitUI(node.expressionId);
		rpcService.addEventListener(ResultEvent.RESULT,limitUIHandler);
		
	}
	public function limitUIHandler(event:ResultEvent):void
	{
		var htmlStr:String = event.result as String;
		ExternalInterface.call("showEntityInformation",htmlStr);
		rpcService.removeEventListener(ResultEvent.RESULT,limitUIHandler);
	}	
	
	public function editLimit(strToCreateQueyObject:String,entityName:String):void
	{
		
		if(strToCreateQueyObject=="")	
		{
			showValidationMessagesToUser(DAGConstants.EMPTY_LIMIT_ERROR_MESSAGE);
		}
		else
		{
			rpcService.addEventListener(ResultEvent.RESULT,editNodeHandler);
			rpcService.editNode(strToCreateQueyObject,entityName);
			showValidationMessagesToUser(DAGConstants.EDIT_LIMITS_MESSAGE);
		}
							
	}
	public function editNodeHandler(event:ResultEvent):void
	{
		var tooltip:String = event.result as String;
		eNode.toolTip = tooltip;
		rpcService.removeEventListener(ResultEvent.RESULT,editNodeHandler);
	}
	
	private var eNode:DAGNode;




    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___Application1_dragEnter(event:mx.events.DragEvent):void
{
	doDragEnter(event)
}

/**
 * @private
 **/
public function ___Application1_dragDrop(event:mx.events.DragEvent):void
{
	onDragDrop(event)
}

/**
 * @private
 **/
public function ___Application1_creationComplete(event:mx.events.FlexEvent):void
{
	initApp()
}

/**
 * @private
 **/
public function ___Button1_click(event:flash.events.MouseEvent):void
{
	drawLine()
}


	//	binding mgmt


	static mx_internal var _DAG_StylesInit_done : Boolean = false;

	mx_internal function _DAG_StylesInit():void
	{
		//	only add our style defs to the StyleManager once
		if (mx_internal::_DAG_StylesInit_done)
			return;
		else
			mx_internal::_DAG_StylesInit_done = true;

		var style:CSSStyleDeclaration;
		var effects:Array;


		StyleManager.mx_internal::initProtoChainRoots();
	}




    /**
     * @private
     **/
    public var _bindingsByDestination : Object;
    /**
     * @private
     **/
    public var _bindingsBeginWithWord : Object;

}

}
