options{IGNORE_CASE = true;STATIC = false;}
PARSER_BEGIN(SqlFormatter)
package edu.wustl.common.util;
import java.io.*;

// generated using javaCC. See the file Sql.jj

public class SqlFormatter {
 
  public static void main(String args[]) throws Exception {
    SqlFormatter formatter = new SqlFormatter(new FileInputStream("in.sql"));
    System.out.println(formatter.format());
  }

  public SqlFormatter (String s) {
  	this(new StringReader(s));
  }
}

PARSER_END(SqlFormatter)


// PARSER SPECIFICATIONS BEGIN HERE

JAVACODE
public String format()
{Token tok;
	
	StringBuilder res = new StringBuilder(); token_source.res = res;
      while (true) {
      	tok=getNextToken();
        if(tok.kind == EOF)
	        break;
      }
     return res.toString();
}


TOKEN_MGR_DECLS :
{StringBuilder res;
  private int indent = 0;
    private static final String INDENT = "     ";
    private int nesting = 0;
  
private void updateRes(int cons) {
	res.append(image);
	res.insert(res.length()-tokenImage[cons].length()+2, NLI());
}
  private String NLI() {
        return "\n" + indent();
  }
  
  private String indent() {
        String s="";
        for(int i=0;i<indent;i++) s+=INDENT;
        return s;
  }
}
// LEXICAL SPECIFICATIONS BEGIN HERE
TOKEN:
{
  <#SELECT: "select ">
|
  <#FROM: " from ">
|    	
  <#INJOIN: " inner join ">
|
  <#LJOIN: " left join ">
|
  <#WHERE: " where ">
|
  <#ON: " on ">
|
  <#ANY: ~[]>	
}

<DEFAULT>
SKIP:
{
  <_SELECT11 : <SELECT>>  {res.append("select "); } : SELECT_ST
|
  <_ANY1 : <ANY>>
}

<SELECT_ST>
MORE:
{
	"," {image.append(NLI());}
	|
	"(" {nesting++;}
	|
	")" {nesting--;}
	|
    <_FROM1 : <FROM>> {if(nesting == 0) {updateRes(FROM); SwitchTo(FROM_ST);}}
	|
    <_ANY2 : <ANY>>
}

<FROM_ST>
SKIP:
{
 <_INJOIN1 : <INJOIN>>  {updateRes(INJOIN);} : JOIN_ST
 |
 <_LJOIN1 : <LJOIN>> {updateRes(LJOIN);} : JOIN_ST
 |
 <_WHERE1 : <WHERE>> {updateRes(WHERE); nesting=0;} : WHERE_ST
}

<FROM_ST>
TOKEN:
{
  "(" { indent++; res.append("("+NLI());} : DEFAULT
  |
  ")"  {res.append(")"); nesting--; if(nesting < 0) {indent--; nesting=0; SwitchTo(ON_ST);} }
  |
  <_ANY3 : <ANY>> {res.append(image);}
}


<JOIN_ST>
TOKEN:
{
  "(" {indent++; res.append("("+NLI()); } : DEFAULT
}

<JOIN_ST>
SKIP:
{
 <_ON1: <ON>> {updateRes(ON);} : ON_ST
}

<JOIN_ST>
MORE:
{
  <_ANY4 : <ANY>>
}

<ON_ST>
TOKEN:
{
	"(" {res.append("("); nesting++;}
	|
	")" {res.append(")"); nesting--; if(nesting < 0) {indent--; nesting=0;}}
	|
	<_ON2:<ON>> {updateRes(ON);}
	|
    <_ANY5 : <ANY>> {res.append(image);}
}
<ON_ST>
SKIP:
{
 <_INJOIN2 : <INJOIN>>  {updateRes(INJOIN);} : JOIN_ST
 |
 <_LJOIN2 : <LJOIN>> {updateRes(LJOIN);} : JOIN_ST
 |
 <_WHERE2 : <WHERE>> {updateRes(WHERE);} : WHERE_ST
}

<*>
TOKEN:
{
	<EOF> {res.append(image);}
}
<WHERE_ST>
TOKEN:
{
	"(" {res.append("("); nesting++;}
	|
	")" {res.append(")"); nesting--; if(nesting < 0) {indent--; nesting=0; SwitchTo(ON_ST);} }
	|
	<_ANY6 : <ANY>> {res.append(image);}
}