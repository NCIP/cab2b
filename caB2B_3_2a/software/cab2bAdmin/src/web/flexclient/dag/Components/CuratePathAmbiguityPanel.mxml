<?xml version="1.0" encoding="utf-8"?>

<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"  layout="absolute" width="520" height="390" creationComplete="init()" verticalScrollPolicy="off" horizontalScrollPolicy="off" headerColors="red">
<mx:Script>
	<![CDATA[
		import mx.controls.listClasses.ListBase;
		import mx.controls.RadioButton;
		import mx.controls.DataGrid;
		import mx.controls.CheckBox;
		import mx.binding.utils.BindingUtils;
		import mx.collections.ArrayCollection;
		import mx.managers.PopUpManager;
	    import mx.events.CollectionEvent;
	    import Components.DAGPath;
	    import mx.controls.Alert;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.collections.XMLListCollection;


	    [Bindable]
		public var pathList:ArrayCollection=new ArrayCollection();
	    [Bindable]
		public var curatedPathList:ArrayCollection=new ArrayCollection();
	    [Bindable]
		public var selectedPathList:ArrayCollection=new ArrayCollection();
	    [Bindable]
		public var selectedList:ArrayCollection= null;
	    [Bindable]
		public var xmlData:XML=null;
		[Bindable]
		public var isRadioButtonSelected:Boolean=false;
		[Bindable]
		public var nodeList:ArrayCollection =null;						
		public var dagPath:DAGPath = null;
		public var allPathsListMap:Object=null;
		public var callingPage:String="";
		public var isAutoConnect:Boolean=false;
		/**
		* Initialization ambiguity panel.
		*/
		private function init():void
        {
        	selectedList = new ArrayCollection();
        	var dg :DataGrid = this.getChildByName("pathGrid") as DataGrid;
        //	addEventListener(MouseEvent.CLICK, onSimpleClickEvent);
        }
       /**
       * OK & Cancel event Handler
       */
		public  function closePopUp(event:MouseEvent):void {
			
			PopUpManager.removePopUp(this);
			if(event.target.name=="OK")	{
				
				if(isAutoConnect) {
				var noOfchild:int = xmlData.ICurated[pathGrid.selectedIndex].children().length();
				var dagPathList:ArrayCollection = new ArrayCollection();
				

				for(var i :int =0 ; i<noOfchild-1;i++){
					var dagPath:DAGPath = new DAGPath();
					var pathId:String=xmlData.ICurated[pathGrid.selectedIndex].children()[i].children()[0];
					var sourceNodeId:int=xmlData.ICurated[pathGrid.selectedIndex].children()[i].children()[1] ; 
					var targetNodeId:int=xmlData.ICurated[pathGrid.selectedIndex].children()[i].children()[2] ;
					var toolTip:String =xmlData.ICurated[pathGrid.selectedIndex].children()[i].children()[3];
					dagPath.setPathId(pathId);
					dagPath.setSourceNodeId(sourceNodeId);
					dagPath.setDestinationNodeId(targetNodeId);
					dagPath.setToolTip(toolTip);
					dagPathList.addItem(dagPath);
				
				} 
				
				this.parentApplication.rpcService.updateAutoConnect(nodeList,dagPathList); 
				var sourceNode:DAGNode;
				var targetNode:DAGNode;
					
				for(var j:int=0;j< dagPathList.length;j++ ){
					var currentDagPath :DAGPath=dagPathList.getItemAt(j)as DAGPath;
				
							for(var i:int =0;i<nodeList.length;i++ ){
							var currentDagNode:DAGNode = nodeList.getItemAt(i)as DAGNode;
							if(currentDagPath.getSourceNodeId()==currentDagNode.getExpressionId()){
								sourceNode = currentDagNode;
							}
							
							if(currentDagPath.getDestinationNodeId()==currentDagNode.getExpressionId()){
								targetNode = currentDagNode;
					
							}
					
					}
					
					this.parentApplication.linkNodes(sourceNode.expressionId.toString(),targetNode.expressionId.toString(),currentDagPath);
				}		
				
				for(var i:int =0;i<nodeList.length; ){
						var currentDagNode:DAGNode = nodeList.getItemAt(i)as DAGNode;
						currentDagNode.unSelect();
					}
			
				}
				else{
					
					var dataProvider:ArrayCollection =pathGrid.dataProvider as ArrayCollection;
					var selectedPath:DAGPath=dataProvider.getItemAt(pathGrid.selectedIndex) as DAGPath;
					this.parentApplication.rpcService.removeEventListener(ResultEvent.RESULT,this.parentApplication.getPathHandler,false);
					this.parentApplication.rpcService.addEventListener("result",this.parentApplication.linkNodesHandler);
					this.parentApplication.rpcService.linkNodes(nodeList,selectedPath); 
					for(var i:int =0;i<nodeList.length; ){
							var currentDagNode:DAGNode = nodeList.getItemAt(i)as DAGNode;
						currentDagNode.unSelect();
					}	
					
					
				}
				}
				else
				{
					selectedList=null;
					pathList=null;
					this.parentApplication.cancelHandler(nodeList);
				}

			}

			private function initDataGridData():void{
				
				if(this.isAutoConnect){
				pathGrid.dataProvider=this.xmlData.ICurated;
				dataColumn.dataField="ToolTip";
			//	dataColumn.dataTipField=this.xmlData.ToolTip;
			
				
				}
				else {
				pathGrid.dataProvider=this.pathList;
			///	dataColumn.dataTipField="toolTip";
				}
			}

		 private function tipFunction(item:Object):String{
           
            var tempString:String="";

           if(this.isAutoConnect){
           	 tempString=item.ToolTip;
           	
           }
           else
            tempString = item.toolTip;
           
           return tempString;
        }

		/**
		* This is the function that will catch the click event
		* that will bubble up from the Checkbox in our DataGrid's itemRenderer
		*/
		private function onSimpleClickEvent(e:MouseEvent):void
		{
			
			
		}
		
	]]>
</mx:Script>
	
	<mx:DataGrid id="pathGrid" name="pathGrid"  width="500" x="0" height="315" y="0" verticalScrollPolicy="on" horizontalScrollPolicy="off"
	creationComplete="{initDataGridData()}" allowMultipleSelection="false"  dataTipFunction="{tipFunction}">
		<mx:columns>
			<mx:DataGridColumn headerText="Select" dataField="isSelected" width="60" itemRenderer="Components.RadioButtonItemRenderer" rendererIsEditor="true" editorDataField="selected"/>	
			<mx:DataGridColumn id="dataColumn" headerText="Available Path " dataField="toolTip"  showDataTips="true" width="500" wordWrap="true"/>
		</mx:columns>
	</mx:DataGrid>

	<mx:ControlBar name="controlBar">
		<mx:Spacer width="100%"/>
		<mx:Button name="OK" label="OK" click="closePopUp(event)"/>
		<mx:Button name="Cancel" label="Cancel" click="closePopUp(event)"/>
	</mx:ControlBar>

</mx:Panel>
