<jmeterTestPlan version="1.2" properties="1.8">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Badboy Test Plan" enabled="true">
      <collectionProp name="TestPlan.thread_groups"/>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <longProp name="ThreadGroup.start_time">1197459282000</longProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <longProp name="ThreadGroup.end_time">1197459282000</longProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <collectionProp name="CookieManager.cookies"/>
        </CookieManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="VIEWSTATE">VIEWSTATE</stringProp>
            <stringProp name="jsessionid">jsessionid</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="745697">
              <stringProp name=""></stringProp>
              <stringProp name=""></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <boolProp name="TestElement.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Step 1" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">true</boolProp>
        </LoopController>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/ApplyFormsIndexAction.do" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/ApplyFormsIndexAction.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">Build Form</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">buildForm</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">buildForm</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Build+Form</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">AddNewForm</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">AddNewForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">insertParentData</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataEntryOperation</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">dataEntryOperation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">insertParentData</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/ApplyGroupDefinitionAction.do" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/ApplyGroupDefinitionAction.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">showNextPage</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">groupOperation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">groupOperation</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">showNextPage</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">ExistingGroup</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">createGroupAs</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">createGroupAs</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">ExistingGroup</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">testrdnew</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">groupName</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">groupName</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">1287</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">groupDescription</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">groupDescription</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">NewGroup</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">createGroupAsHidden</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">createGroupAsHidden</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">NewGroup</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">AddNewForm</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">AddNewForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">tempgroupNameText</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">tempgroupNameText</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">tempgroupDescription</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">tempgroupDescription</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">1287</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tempgroupName</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">tempgroupName</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">1287</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">tempgroupDescription</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">tempgroupDescription</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/ApplyFormDefinitionAction.do" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/ApplyFormDefinitionAction.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">testbugnew2</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">formName</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">formName</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">testbugnew</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">conceptCode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">conceptCode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">formDescription</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">formDescription</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parentForm</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">parentForm</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">NewForm</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">createAs</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">createAs</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">NewForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">buildForm</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">operation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operation</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">buildForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">AddNewForm</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">AddNewForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">entityIdentifier</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">entityIdentifier</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">selectedObjectId</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">selectedObjectId</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">currentContainerName</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">currentContainerName</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">Form</stringProp>
                  <stringProp name="Argument.name">viewAs</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">viewAs</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Form</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/AddControlsAction.do" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/AddControlsAction.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">nhh</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">caption</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">caption</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">nhh</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeConceptCode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeConceptCode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">description</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">description</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">TextControl</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userSelectedTool</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">userSelectedTool</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">TextControl</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">Text</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">initialDataType</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">initialDataType</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Text</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributenoOfCols</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributenoOfCols</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">Text</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataType</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">dataType</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Text</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">SingleLine</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">linesTypeHidden</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">linesTypeHidden</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">SingleLine</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">SingleLine</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">linesType</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">linesType</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">SingleLine</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeNoOfRows</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeNoOfRows</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeSize</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeSize</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeDecimalPlaces</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeDecimalPlaces</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">min</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">min</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">max</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">max</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">controlAdded</stringProp>
                  <stringProp name="Argument.name">operation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operation</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">controlAdded</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">selectedAttrib</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">selectedAttrib</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">Add</stringProp>
                  <stringProp name="Argument.name">controlOperation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">controlOperation</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Add</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">selectedControlId</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">selectedControlId</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">validationRules</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">validationRules</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">testbugnew</stringProp>
                  <stringProp name="Argument.name">currentContainerName</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">currentContainerName</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">testbugnew</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">entitySaved</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">entitySaved</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">previousControl</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">previousControl</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">AddSubForm</stringProp>
                  <stringProp name="Argument.name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">AddSubForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">controlsSequenceNumbers</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">controlsSequenceNumbers</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">checkAttribute</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">checkAttribute</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/LoadFormControlsAction.do" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/LoadFormControlsAction.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="http://localhost/dynamicExtensions/SaveEntityAction.do" enabled="true">
            <stringProp name="HTTPSampler.path">/dynamicExtensions/SaveEntityAction.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">caption</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">caption</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeConceptCode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeConceptCode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">description</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">description</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">TextControl</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userSelectedTool</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">userSelectedTool</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">TextControl</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">Text</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">initialDataType</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">initialDataType</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Text</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributenoOfCols</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributenoOfCols</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">Text</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataType</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">dataType</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Text</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">SingleLine</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">linesTypeHidden</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">linesTypeHidden</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">SingleLine</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">SingleLine</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">linesType</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">linesType</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">SingleLine</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeNoOfRows</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeNoOfRows</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeSize</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeSize</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeDecimalPlaces</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeDecimalPlaces</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">attributeDefaultValue</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">min</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">min</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">max</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">max</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">operation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operation</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">selectedAttrib</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">selectedAttrib</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">Add</stringProp>
                  <stringProp name="Argument.name">controlOperation</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">controlOperation</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">Add</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">selectedControlId</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">selectedControlId</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">validationRules</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">validationRules</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">testbugnew</stringProp>
                  <stringProp name="Argument.name">currentContainerName</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">currentContainerName</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">testbugnew</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.name">entitySaved</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">entitySaved</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">true</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">previousControl</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">previousControl</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value">AddSubForm</stringProp>
                  <stringProp name="Argument.name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">operationMode</stringProp>
                  <stringProp name="HTTPArgument.encoded_value">AddSubForm</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">controlsSequenceNumbers</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">controlsSequenceNumbers</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">checkAttribute</stringProp>
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="HTTPArgument.encoded_name">checkAttribute</stringProp>
                  <stringProp name="HTTPArgument.encoded_value"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          </HTTPSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="616353152">Form &amp;#39;testbugnew2&amp;#39; Saved Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.assume_success">false</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
            <name>saveConfig</name>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.error_logging">false</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
            <name>saveConfig</name>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.error_logging">false</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
