<?xml version ="1.0"?>

<!--Ant Script for create Build for caTISSUE Core-->
<project name="DynamicExtensions" default="compile">

	<!--define require dir and Properties -->
	<property file="DynamicExtensions.properties"/>
	<property file="db.properties"/>


	<property name="base.dir" value="."/>
    <property name="src.dir" value="src"/>
	<property name="test.dir" value="test"/>
    <property name="target.dir" value="WEB-INF/classes"/>
    <property name="lib.dir" value="${base.dir}/WEB-INF/lib"/>
    <property name="build.dir" value="${base.dir}/build"/>
    <property name="applet.dir" value="${base.dir}/Applet"/>
	<property name="interface.dir" value="${base.dir}/DynamicExtensionsInterface"/>
	<property name="interface.src.dir" value="${base.dir}/DynamicExtensionsInterfaceSource"/>
	<property name="javadoc.dir" value="${base.dir}/JavaDoc"/>
	<property name="javadoc.zip" value="DynamicExtensionsJavaDoc.zip"/>


	<property name="hbm.dir" value="${src.dir}/edu/common/dynamicextensions/hbm"/>
	<property name="extra_lib.dir" value="${base.dir}/extra_lib"/>
	<property name="generateforce" value="true"/>

	<property name="mysql.dir" value="${base.dir}/SQL/MySql"/>
	<property name="oracle.dir" value="${base.dir}/SQL/Oracle"/>
	<property name="common.dir" value="${base.dir}/SQL/Common"/>

	<!--Properties set for checkstyle "Tools that generate report of code convention violations"-->
	<property name="checkstyle.dir" value="${base.dir}/checkstyle"/>
	<property name="checkstyle.rules.file" value="${checkstyle.dir}/CheckStyleRules.xml"/>
	<property name="checkstyle.report.formatter" value="${checkstyle.dir}/report_formatter/checkstyle-simple.xsl"/>
	<property name="checkstyle.report.dir" value="${checkstyle.dir}/checkstyle_reports"/>
	<property name="checkstyle.unformatted.report" value="${checkstyle.report.dir}/checkstyle_report.xml"/>
	<property name="checkstyle.formatted.report" value="${checkstyle.report.dir}/checkstyle_report.html"/>

	<!--Properties set for checkstyle "PMD scans Java source code and looks for potential code problems"-->
	<!--Read for more details http://pmd.sourceforge.net/cpd.html -->
	<property name="pmd.dir" value="${base.dir}/pmd-3.8"/>
	<property name="pmd.report.dir" value="${pmd.dir}/reports"/>
	<property name="pmd.report.html" value="${pmd.report.dir}/DyExt_PMD_Report.html"/>

	<property name="temp.hdoclet.dir" value="${base.dir}/temp"/>

	<property name="junit.report.dir" value="${base.dir}/junit"/>


	<path id="app.classpath">
		<pathelement location="${base.dir}/lib/postgresql-8.1-405.jdbc3.jar"/>
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="xdoclet.classpath">
		<path refid="app.classpath"/>
        <pathelement location="${extra_lib.dir}/commons-net-1.2.2.jar"/>
		<pathelement location="${extra_lib.dir}/hibernate-tools.jar"/>
		<pathelement location="${extra_lib.dir}/servlet-api.jar"/>
		<pathelement location="${extra_lib.dir}/xdoclet-1.2.jar"/>
		<pathelement location="${extra_lib.dir}/xdoclet-hibernate-module-1.2.jar"/>
		<pathelement location="${extra_lib.dir}/xdoclet-xdoclet-module-1.2.jar"/>
		<pathelement location="${extra_lib.dir}/xerces.jar"/>
		<pathelement location="${extra_lib.dir}/xjavadoc-1.0.2.jar"/>
		<pathelement location="${extra_lib.dir}/xsdlib.jar"/>
	</path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    	<classpath>
    		<pathelement location="${extra_lib.dir}/ant-contrib.jar"/>
      	</classpath>
    </taskdef>

	<!-- sub tasks -->
	<target name="init">
    	<!-- Create the time stamp -->
	    <tstamp/>
    	<!-- Create the build directory structure used by compile -->
		<delete dir="${target.dir}"/>
		<delete dir="${build.dir}"/>

		<mkdir dir="${target.dir}"/>
	    <mkdir dir="${build.dir}"/>

		<!-- Create the checkstyle report directory-->
		<delete dir="${checkstyle.report.dir}"/>
		<mkdir dir="${checkstyle.report.dir}"/>

		<delete dir="${pmd.report.dir}"/>
		<mkdir dir="${pmd.report.dir}"/>

  	</target>


	<target name="checkstyle" depends="init" description="Generates a report of code convention violations.">
		<taskdef resource="checkstyletask.properties" classpath="${extra_lib.dir}/checkstyle-all-4.2.jar"/>

	    <checkstyle config="${checkstyle.rules.file}" failureProperty="checkstyle.failed" failOnViolation="false">
	    	<formatter type="xml" tofile="${checkstyle.unformatted.report}"/>
	      	<fileset dir="${src.dir}" includes="**/*.java"/>
	    </checkstyle>

	    <style in="${checkstyle.unformatted.report}" out="${checkstyle.formatted.report}" style="${checkstyle.report.formatter}"/>
	</target>

	<!-- ,,,,,junit,logging-jakarta-commons,logging-java,migrating,,optimizations,strictexception,,,"-->
	<target name="pmd" depends="init" description="PMD scans Java source code and looks for potential code problems.">
		<taskdef name="pmd" classpath="${pmd.dir}/lib/pmd-3.8.jar" classname="net.sourceforge.pmd.ant.PMDTask"/>
		<pmd shortFilenames="true">
			<ruleset>basic</ruleset>
			<ruleset>braces</ruleset>
			<ruleset>clone</ruleset>
			<ruleset>codesize</ruleset>
			<ruleset>controversial</ruleset>
			<ruleset>coupling</ruleset>
			<ruleset>design</ruleset>
			<ruleset>finalizers</ruleset>
			<ruleset>imports</ruleset>
			<ruleset>j2ee</ruleset>
			<!--ruleset>javabeans</ruleset-->
			<ruleset>migrating</ruleset>
			<ruleset>naming</ruleset>
			<ruleset>strings</ruleset>
			<ruleset>unusedcode</ruleset>
			<ruleset>sunsecure</ruleset>

			<formatter type="html" toFile="${pmd.report.html}"/>
			<fileset dir="${src.dir}" includes="**/*.java"/>
		</pmd>
	</target>

	<target name="checkstyle_wrapper" depends="checkstyle" description="Breaks the build is checkstyle detected code conventions violations.">
	</target>

	<!-- Compile all files, generated and hand-written -->
    <target name="compile" depends="init">
        <javac destdir="${target.dir}" includes="**/*.*" includeAntRuntime="false" debug="true">
            <src path="${src.dir}"/>
            <classpath refid="app.classpath"/>
        </javac>
    	<copy todir="${target.dir}">
    		<fileset dir="${src.dir}">
    			<include name="**/*.properties"/>
    			<include name="**/*.xml"/>
    			<include name="**/*.xsl"/>
    			<include name="**/*.hbm.xml"/>
    			<include name="**/*.ser"/>
	    	</fileset>
    	</copy>
    </target>

    <target name="compile_test_cases" depends="compile">
        <javac destdir="${target.dir}" includes="**/*.*" includeAntRuntime="false" debug="true">
            <src path="${test.dir}"/>
            <classpath refid="app.classpath"/>
        </javac>
       	<!--copy file="${target.dir}/TestHibernate.cfg.xml" tofile="${target.dir}/DynamicExtensionsHibernate.cfg.xml" overwrite="true"/-->
    </target>

	<!-- Create the Applet JAR Begins-->
    <target name="applet_jar" depends="compile" >
    	<delete>
            <fileset dir="${applet.dir}">
	            <exclude name="**/CVS*"/>
	            <exclude name="**/java.policy.applet*"/>
            </fileset>
        </delete>

        <copy todir="${applet.dir}">
        	<fileset dir="${target.dir}">
            	<include name="**/QueryTree.class"/>
				<include name="**/NodeSelectionListener.class"/>
				<include name="**/StorageLocationViewListener.class"/>
				<include name="**/TissueSiteTreeNodeListener.class"/>
        	</fileset>
        </copy>
        <copy todir="${applet.dir}/edu/wustl/catissuecore/query">
        	<fileset dir="${target.dir}/edu/wustl/catissuecore/query">
	    	    <include name="**/QueryTreeNodeMap.class"/>
	    	    <include name="**/TreeNodeData.class"/>
    		</fileset>
    	</copy>
        <copy todir="${applet.dir}/edu/wustl/catissuecore/storage">
    		<fileset dir="${target.dir}/edu/wustl/catissuecore/storage">
	    	    <include name="**/GenerateTree.class"/>
	    	    <include name="**/StorageContainerGridObject.class"/>
	    	    <include name="**/StorageContainerTreeNode.class"/>
    		</fileset>
    	</copy>
        <copy todir="${applet.dir}/edu/wustl/catissuecore/tissuesite">
    		<fileset dir="${target.dir}/edu/wustl/catissuecore/tissuesite">
	    	    <include name="**/TissueSiteTreeNode.class"/>
    		</fileset>
    	</copy>
        <copy todir="${applet.dir}/edu/wustl/catissuecore/util/global">
    		<fileset dir="${target.dir}/edu/wustl/catissuecore/util/global">
	    	    <include name="**/Constants.class"/>
    		</fileset>
    	</copy>
    	<copy todir="${applet.dir}/edu/wustl/catissuecore/vo">
    		<fileset dir="${target.dir}/edu/wustl/catissuecore/vo">
	    	    <include name="**/TreeNode.class"/>
	    	    <include name="**/TreeNodeFactory.class"/>
    		</fileset>
    	</copy>

        <jar taskname="buildJar" jarfile="${applet.dir}/QueryTree.jar">
            <fileset dir="${applet.dir}">
	            <exclude name="**/CVS*"/>
	            <exclude name="**/java.policy.applet*"/>
            </fileset>
        </jar>
    </target>
	<!-- Create the Applet JAR Ends-->


	<!-- Create dynamic extensions jar Begins-->
	    <target name="create_dyn_ext_interface_jar" depends="compile" >
		   <delete file="${interface.dir}/DynamicExtensions.jar"/>
    	   <jar taskname="buildJar" jarfile="${interface.dir}/DynamicExtensions.jar">
	    		<fileset dir="${target.dir}" >
		    			<include name="**/domain/**/*.class"/>
	    				<include name="**/domaininterface/**/*.class"/>
	    				<include name="**/entitymanager/**.class"/>
	    				<include name="**/exception/*.class"/>
		    			<include name="**/hbm/**/*.*"/>
		    			<include name="**/dynamicextensions/util/**/*.*"/>
		    			<include name="**/common/util/**/*.*"/>
		    			<include name="**/dynamicextensions/bizlogic/**/*.class"/>
	    				<include name="*.properties"/>
	    				<include name="*.xml"/>
		    			<include name="**/xmi/**/*.*"/>
	    				<include name="*.xsl"/>
	    				<include name="**/ui/interfaces/*.class"/>
	    				<include name="**/ui/util/*.class"/>
	    				<include name="**/processor/**/*.class"/>
		    			<include name="**/ui/webui/util/*.class"/>
		    			<exclude name="**/*Test*.class"/>

	   		    </fileset>    	  
	        	 <manifest>
	        	      <attribute name="Built-By" value="${DynamicExtensions.jar.creator}"/>

	        	      <section name="${DynamicExtensions.jar.details}">
	        	        <attribute name="Version" value="${DynamicExtensions.jar.version}"/>
	        	      	<attribute name="Date" value="${DynamicExtensions.jar.date}"/>
	        	      </section>
	        	 </manifest>
	        </jar>
	    </target>
	<!-- Create dynamic extensions jar Begins-->

	<target name="create_dyn_ext_interface_sourcezip" depends="compile" >
		<delete  file="${interface.src.dir}/DynamicExtensions-src.zip"/>
		<zip destfile="${interface.src.dir}/DynamicExtensions-src.zip" >
		      	<fileset dir="${src.dir}" >
		      		<include name="**/domain/**/*.java"/>
    				<include name="**/domaininterface/**/*.java"/>
    				<include name="**/entitymanager/**.java"/>
	    			<include name="**/dynamicextensions/bizlogic/**/*.java"/>
    				<include name="**/exception/*.java"/>
	    			<include name="**/hbm/**/*.*"/>
	    			<include name="**/dynamicextensions/util/**/*.java"/>
	    			<include name="**/common/util/**/*.java"/>
	 				<include name="*.properties"/>
	  				<include name="*.xml"/>
	    		 </fileset>

			<fileset dir="${test.dir}" >

				    		 </fileset>
	   </zip>
	</target>


	<!-- Creates the WAR (Web Application Archive) file of the application -->
	<target name="build_app_war" depends="compile">
		<delete file="dynamicExtensions.war"/>
		<war destfile="dynamicExtensions.war" webxml="WEB-INF/web.xml">
			<fileset dir="${base.dir}">
				<include name="css/**/*"/>
				<include name="images/**/*"/>
				<include name="jss/**/*"/>
				<include name="pages/**/*"/>
				<include name="dhtml_comp/**/*"/>
				<include name="runtime/**/*"/>
				<include name="WEB-INF/**/*"/>
				<include name="error.jsp"/>
				<include name="ApplicationVersionInfo.txt"/>
			</fileset>
 		</war>
	</target>

	<!--Deploys the application war file at JBOSS server by coping it to deploy directory of application server-->
	<target name="deploy" depends="build_app_war">
		<delete file="${jboss.home.dir}/server/default/deploy/dynamicExtensions.war"/>
		<copy file="dynamicExtensions.war" todir="${jboss.home.dir}/server/default/deploy"/>
		<sleep seconds="2"/>
	</target>

	<target name="build_jar" depends="compile" >
	        <delete>
	            <fileset dir="${build.dir}" includes="**/*"/>
	        </delete>

	        <jar taskname="buildJar" jarfile="${build.dir}/cawebeav.jar">
	            <fileset dir="${target.dir}" includes="**/*"/>
	        </jar>
	    </target>

	<!-- Generates schema for DE release.The longblob changes are done for MYSQL using Alter table SQL -->
	<target name="generate_schema" depends="generate_hbm,build_jar">
	    	<java classname="edu.wustl.common.util.dbManager.GenerateSchema">
	    		<arg value="true"/>
	            <classpath>
		            <pathelement location="${build.dir}/cawebeav.jar"/>
	            	<fileset dir="${lib.dir}">
	                  <include name="*.jar"/>
	              </fileset>
	            </classpath>
	      	</java>
			<if>
				<equals arg1="${hibernate.connection.driver_class}" arg2="com.mysql.jdbc.Driver" />
				<then>
					<sql driver="${hibernate.connection.driver_class}"
						password="${hibernate.connection.password}"
						url="${hibernate.connection.url}"
						userid="${hibernate.connection.username}"
						onerror="continue">
						<classpath>
							<pathelement location="${build.dir}/cawebeav.jar"/>
								<fileset dir="${lib.dir}">
									<include name="*.jar"/>
								</fileset>
						</classpath>
						<transaction  src="${base.dir}/SQL/DynamicExtensions_MYSQL.SQL"/>
					</sql>
				</then>
			</if>
	    </target>
	<!-- Generates schema for DE API release.The longblob changes are done for MYSQL using regular expressions -->
		<target name="generate_schema_de_api_release" depends="generate_hbm,build_jar">

			<java classname="edu.wustl.common.util.dbManager.GenerateSchema">
				<arg value="false"/>
				<classpath>
					<pathelement location="${build.dir}/cawebeav.jar"/>
					<fileset dir="${lib.dir}">
						<include name="*.jar"/>
					</fileset>
				</classpath>
			</java>
			<if>
				 <equals arg1="${hibernate.connection.driver_class}" arg2="com.mysql.jdbc.Driver" />
				 <then>
				 	<replaceregexp byline="true" flags="g">
				 		<fileset dir="${base.dir}">
				 			<include name="dynamicextension.sql"/>
				 		</fileset>
				 		<regexp pattern="blob"/>
				 		<substitution expression="longblob"/>
				 	</replaceregexp>
				 </then>
			</if>
		</target>

		<!-- Generates the Hibernate mapping (HBM) files which are used in mapping
		 the domain objects to database schema of the application.
		 This generates the HBM files from the XDoclet tags written in the domain object classes. -->
    <target name="generate_hbm" description="Generates Hibernate class descriptor files." depends="compile,remove_generics">
    	<!-- Define the hibernatedoclet task -->
    	<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
    		<classpath refid="xdoclet.classpath"/>
		</taskdef>

		<!-- Execute the hibernatedoclet task -->
		<hibernatedoclet destdir="${src.dir}" excludedtags="@version,@author,@todo,@param,@return"
					     force="${generateforce}" mergedir="${src.dir}" verbose="false">
			<fileset dir="${temp.hdoclet.dir}">
				<include name="**/domain/**/*.java"/>
			</fileset>
    		<hibernate version="2.0"/>
		</hibernatedoclet>

		<!-- Upgrade grammar from Hibernate1 to Hibernate2 -->
	    <replace dir="${src.dir}">
	    	<include name="**/domain/**/*.hbm.xml"/>
	        <include name="**/cde/*.hbm.xml"/>

	        <replacefilter token="readonly=" value="inverse="/>
	        <replacefilter token="role=" value="name="/>
	        <replacefilter token="hibernate-mapping-2.0.dtd" value="hibernate-mapping-3.0.dtd"/>
            <replacefilter token="&lt;hibernate-mapping&gt;" value="&lt;hibernate-mapping default-lazy=&quot;false&quot;&gt;"/>      
	    </replace>
     
        <!-- replace dir="${src.dir}">
            <include name="**/domain/**/*.hbm.xml"/>
            <include name="**/cde/*.hbm.xml"/>

            <replacefilter token="readonly=" value="inverse="/>
            <replacefilter token="role=" value="name="/>
            <replacefilter token="hibernate-mapping.dtd" value="hibernate-mapping-2.0.dtd"/>
        </replace -->   

  	  <replaceregexp byline="true" flags="g">
  	    <fileset dir="${src.dir}">
  	      <include name="edu/common/dynamicextensions/domain/userinterface/Container.hbm.xml"/>
  	    </fileset>
  	    <regexp pattern="&lt;hibernate-mapping.*&gt;"/>
  	    <substitution expression="&lt;hibernate-mapping auto-import=&quot;false&quot; default-lazy=&quot;false&quot;&gt;"/>
  	  </replaceregexp>

     <move file="${src.dir}/edu/common/dynamicextensions/domain/userinterface/Container.hbm.xml" tofile="${src.dir}/edu/common/dynamicextensions/domain/userinterface/DEContainer.hbm.xml" overwrite="true"/>


	    <copy todir="${hbm.dir}">
	    	<fileset dir="${src.dir}/edu/common/dynamicextensions/domain">
	    		<include name="**/*.hbm.xml"/>
    		</fileset>
	    </copy>

    	<delete>
            <fileset dir="${src.dir}/edu/common/dynamicextensions/domain" includes="**/*.hbm.xml"/>
        </delete>

    	<delete dir="${temp.hdoclet.dir}" />

    </target>

	<target name="db_initialized_mysql">
	    <sql
	    	driver="org.gjt.mm.mysql.Driver"
			url="jdbc:mysql://${database.host}:${database.port}/${database.name}"
			userid="${database.username}" password="${database.password}"  onerror="continue">
			<classpath>
	        	<fileset dir="${lib.dir}">
	            	<include name="*.jar"/>
				</fileset>
			</classpath>
	    	DROP DATABASE ${hibernate.connection.username}
	    	CREATE DATABASE
		</sql>
	</target>

	<target name="db_initialized_oracle" >
		<sql
			driver="${hibernate.connection.driver_class}"
			url="${hibernate.connection.url}"
			userid="${database.tempusername}" password="${database.temppassword}" onerror="continue"
	    	rdbms="oracle">
			<classpath>
	        	<fileset dir="${lib.dir}">
	            	<include name="*.jar"/>
	             </fileset>
			</classpath>
			DROP USER ${hibernate.connection.username} CASCADE;
			CREATE USER ${hibernate.connection.username} PROFILE "DEFAULT" IDENTIFIED BY ${hibernate.connection.password} DEFAULT TABLESPACE "${database.tablespace}" TEMPORARY TABLESPACE "${database.temptablespace}" QUOTA UNLIMITED ON "${database.tablespace}";
			GRANT CONNECT, RESOURCE TO ${hibernate.connection.username};
			GRANT DBA TO ${hibernate.connection.username};
			ALTER USER ${hibernate.connection.username} DEFAULT ROLE ALL;
		</sql>
		<antcall target="generate_schema"></antcall>
	</target>



	<!-- ==================================================================================
 **
 **   Javadoc Task
 **
 **  =================================================================================-->
	<!--  Generates javadocs on all source  -->
	<target name="javadoc" description="Generate the documentation">
        <delete dir="${javadoc.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<javadoc access="private" packagenames="edu.common.*" destdir="${javadoc.dir}" author="true" version="true" windowtitle="Dynamic Extensions API" maxmemory="512m" classpathref="app.classpath" breakiterator="yes">
			 <fileset dir="${src.dir}" defaultexcludes="yes">
			 	<include name="**/domain/**/*.java"/>
				<include name="**/domaininterface/**/*.java"/>
			 	<include name="**/entitymanager/**.java"/>
			 	<include name="**/exception/*.java"/>
			 	<include name="**/dynamicextensions/util/**/*.java"/>
			 	<include name="**/common/util/**/*.java"/>
		    </fileset>

			<bottom>
				<![CDATA[<i>
				<b>Copyright @ 2004-05 by WashU
                                Corporation<br>All Rights Reserved.<br>WashU
                                CONFIDENTIAL AND TRADE SECRET</b>
					</i>]]></bottom>

			</javadoc>
			<jar basedir="${javadoc.dir}" destfile="${javadoc.dir}/${javadoc.zip}" />
	</target>

	<target name="create_installable_zip" depends="build_app_war">
		<property name="zip.dir" value="${base.dir}/caTISSUE_Core_Installable"/>
		<delete file="${base.dir}/caTissue_Core_Installable.zip"/>
		<delete dir="${base.dir}/caTissue_Core_Installable"/>
		<mkdir dir="${zip.dir}"/>
		<copy file="caelmir.war" todir="${zip.dir}" overwrite="true"/>
		<!--<copy file="catissuecorecsm.war" todir="${zip.dir}" overwrite="true"/>-->
		<copy file="caelmir-ds.xml" todir="${zip.dir}" overwrite="true"/>
		<copy file="caELMIRInstall.properties" todir="${zip.dir}" overwrite="true"/>
		<copy file="deploy.xml" todir="${zip.dir}" overwrite="true"/>

		<copy todir="${zip.dir}/caelmir-properties" overwrite="true">
			<fileset dir="${base.dir}/caelmir-properties"/>
		</copy>

		<copy todir="${zip.dir}/lib" overwrite="true">
			<fileset file="${base.dir}/extra_lib/ant-contrib.jar"/>
			<fileset file="${base.dir}/WEB-INF/lib/mysql-connector-java-3.0.16-ga-bin.jar"/>
			<fileset file="${base.dir}/WEB-INF/lib/oracleDriver.jar"/>
		</copy>

		<copy todir="${zip.dir}/configuration" overwrite="true">
			<fileset file="${base.dir}/Accessibility.txt"/>
			<fileset file="${base.dir}/ContactUs.txt"/>
			<fileset file="${base.dir}/Disclaimer.txt"/>
			<fileset file="${base.dir}/PrivacyNotice.txt"/>
		</copy>

		<copy todir="${zip.dir}/SQL" overwrite="true">
			<fileset dir="${base.dir}/SQL"/>
		</copy>
		<delete dir="${zip.dir}/SQL/DBUpgrade"/>

		<copy file="MySql_DB_Creation.sql" todir="${zip.dir}" overwrite="true"/>
		<copy file="Oracle_DB_Creation.sql" todir="${zip.dir}" overwrite="true"/>
		<copy file="Sample-log4j.xml" todir="${zip.dir}" overwrite="true"/>
		<copy file="Sample-login-config.xml" todir="${zip.dir}" overwrite="true"/>
		<copy file="Sample-properties-service.xml" todir="${zip.dir}" overwrite="true"/>

		<copy todir="${zip.dir}/images" overwrite="true">
			<fileset file="${base.dir}/images/InstitutionLogo.gif"/>
		</copy>

	<!--	<copy todir="${zip.dir}/caTISSUECore caCORE Client" overwrite="true">
			<fileset dir="${base.dir}/caTISSUECore caCORE Client"/>
		</copy>-->

		<zip destfile="${base.dir}/caTissue_Core_Installable.zip" basedir="${zip.dir}"></zip>
		<delete dir="${zip.dir}"/>
	</target>

	<!-- Create dynamic extensions jar Begins-->
		    <target name="create_dyn_ext_communication_jar" depends="compile" >
		    	<delete file="DynamicExtensionsCommunication.jar"/>
	    	   <jar taskname="buildJar" jarfile="DynamicExtensionsCommunication.jar">
		    		<fileset dir="${target.dir}" >
		    				<include name="**/WebUIManager.class"/>
			    			<include name="**/WebUIManagerConstants.class"/>
	 	  		    </fileset>

		        	 <manifest>
		        	      <attribute name="Built-By" value="Sujay Narkar"/>

		        	      <section name="${DynamicExtensions.jar.details}">
		        	        <attribute name="Version" value="${DynamicExtensions.jar.version}"/>
		        	      	<attribute name="Date" value="${DynamicExtensions.jar.date}"/>
		        	      </section>
		        	 </manifest>
		        </jar>
		    </target>
		<!-- Create dynamic extensions jar Ends-->

	<!-- Since XDoclet isn't already able to parse java 1.5 source code,
	we remove all references to generics and for each loops.
	this is temporary task and needs to be removed,once we uses hibernate annotations.
	-->
	<target name="remove_generics" >
	  <mkdir dir="${temp.hdoclet.dir}" />
	  <property name="generics.match.pattern" value="&lt;[^=(]*&gt;|(for\s?\(.+:.+\))"/>
	  <echo message="Pattern used to remove generics : ${generics.match.pattern}"/>
	  <copy toDir="${temp.hdoclet.dir}" overwrite="true">
	    <fileset dir="${src.dir}">
	      <include name="**/*.java"/>
	    </fileset>
	  </copy>
	  <replaceregexp byline="true" flags="g">
	    <fileset dir="${temp.hdoclet.dir}">
	      <include name="**/*.java"/>
	    </fileset>
	    <regexp pattern="${generics.match.pattern}"/>
	    <substitution expression=""/>
	  </replaceregexp>
	</target>

	 <target name="run_junit" >
	 	<delete dir="${junit.report.dir}"/>
	 	<mkdir dir="${junit.report.dir}"/>

      	<junit printsummary="yes" haltonerror="no" haltonfailure="no"
      		fork="yes">

      		<sysproperty key="net.sourceforge.cobertura.datafile"
      				file="./cobertura/coverage.ser" />


      		<!--formatter type="plain" usefile="false"/-->
      		<formatter type="xml"/>
      		<batchtest todir="${junit.report.dir}">
      			<fileset dir="${test.dir}">
					<include name="**/TestAll.java"/>
			    </fileset>
			</batchtest>

			<classpath>
			<!--	<pathelement location="${junit.classes.dir}"/> -->
				<pathelement location="./cobertura/instrumented/"/>
				<pathelement location="${target.dir}"/>
				 <fileset dir="${lib.dir}">
	                  <include name="*.jar"/>
				 </fileset>
			</classpath>

      		<classpath refid="cobertura.classpath" />
      	</junit>

		<junitreport todir="${junit.report.dir}">
			<fileset dir="${junit.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${junit.report.dir}" />
		</junitreport>

	 	<delete >
			<fileset dir="${junit.report.dir}">
				<include name="**/**/*.xml" />
			</fileset>
	 	</delete>
	</target>

	  <!-- Cobertura -->
	  <path id="cobertura.classpath">
	    <fileset dir="./cobertura">
	      <include name="cobertura.jar"/>
	    </fileset>
	    <fileset dir="./cobertura/lib">
	      <include name="**/*.jar"/>
	    </fileset>
	  </path>

	  <!--<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/> -->


	<target name="generate_codecoverage_report" >
		<ant target="compile_test_cases"/>
		<ant antfile="cobertura.xml" target="instrument"/>
		<ant target="run_junit"/>
		<ant antfile="cobertura.xml" target="coverage.report"/>
		<ant antfile="cobertura.xml" target="coverage.check"/>

	</target>

	<target name="checkin_process">
		<ant target="generate_codecoverage_report"/>
	</target>


	<target name="de_release" depends="build_app_war,create_dyn_ext_interface_jar,create_dyn_ext_interface_sourcezip,javadoc,generate_schema">
		<property name="de_release_dir" value="${base.dir}/de_release"/>
		<delete dir="${de_release_dir}"/>
		<mkdir dir="${de_release_dir}"/>
       	<copy file="dynamicExtensions.war" todir="${de_release_dir}" />
       	<copy file="${interface.dir}/DynamicExtensions.jar" todir="${de_release_dir}" />
       	<copy file="${interface.src.dir}/DynamicExtensions-src.zip" todir="${de_release_dir}" />
       	<copy file="${javadoc.dir}/${javadoc.zip}" todir="${de_release_dir}" />
       	<copy file="${base.dir}/dynamicextension.sql" todir="${de_release_dir}" />
	</target>
	
	<property name="filename" value="" />
	<property name="package" value="" />
	<target name="import_xmi" depends="compile" >			
			<java classname="edu.common.dynamicextensions.xmi.importer.XMIImporter" fork="true">
				<arg value="${filename}"/>
				<arg value="${package}"/>
				<classpath>
		            <pathelement location="${target.dir}"/>
	            	<fileset dir="${lib.dir}">
	                  <include name="*.jar"/>
	              </fileset>
	            </classpath> 			
			</java>
	</target>

	<target name="export_xmi" depends="compile" >			
				<java classname="edu.common.dynamicextensions.xmi.exporter.XMIExporter" fork="true">
					<arg value="${groupname}"/>
					<arg value="${filename}"/>
					<arg value="${version}"/>
					<classpath>
			            <pathelement location="${target.dir}"/>
		            	<fileset dir="${lib.dir}">
		                  <include name="*.jar"/>
		              </fileset>
		            </classpath> 			
				</java>
		</target>
</project>