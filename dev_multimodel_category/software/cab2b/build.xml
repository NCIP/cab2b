<project name="caB2B" basedir="." default="compile.all">
	<property name="src.dir" location="src" />
	<property name="source.dir" location="${src.dir}/java" />
	<property name="resource.dir" location="${src.dir}/resources" />
	<property name="mmc.dir" location="${resource.dir}/mmc" /> 

	<property name="conf.dir" location="${src.dir}/conf" />
	<property file="../build/project.properties" />
	<property file="../build/install.properties" />
	<property file="${conf.dir}/server.properties" />

	<property name="common.src" location="${source.dir}/common" />
	<property name="client.src" location="${source.dir}/client" />
	<property name="server.src" location="${source.dir}/server" />

	<property name="common.test" location="${source.dir}/common" />
	<property name="client.test" location="${source.dir}/client" />
	<property name="server.test" location="${source.dir}/server" />

	<property name="workarea.dir" location="build" />
	<mkdir dir="${workarea.dir}" />
	<property name="client.classes.dir" location="${workarea.dir}/client/classes" />
	<property name="server.classes.dir" location="${workarea.dir}/server/classes" />
	<property name="common.classes.dir" location="${workarea.dir}/common/classes" />

	<property name="reports.dir" location="${workarea.dir}/reports" />
	<property name="cactusReports.dir" location="${reports.dir}/cactus" />
	<property name="build.log.dir" location="${reports.dir}/build" />
	<property name="javadoc.dir" location="${reports.dir}/javadoc" />
	<property name="install.hibernate.cfg" value="installHibernate.cfg.xml" />

	<property name="XmlLogger.file" value="${build.log.dir}\log.xml" />
	<tstamp>
		<format property="TODAY" pattern="d-MMMM-yyyy hh:mm aa" locale="en" />
	</tstamp>

	<property name="testcase.properties.folder" location="${workarea.dir}/TestCaseProperties" />

	<property name="ear.dir" location="${workarea.dir}/ear" />
	<property name="ear.file" location="${workarea.dir}/cab2bServer.ear" />

	<property name="dbutil.properties.file" location="${conf.dir}/dbutil.properties" />
	<property name="jbossjca.service.xml" location="${conf.dir}/jbossjca-service.xml" />
	<property name="log4j.xml.file" location="${conf.dir}/log4j.xml" />
	<property name="tomcat.web.xml.file" location="${conf.dir}/tomcat_web.xml" />
	<property name="jboss.invoker.service.xml.file" location="${conf.dir}/invoker_jboss-service.xml" />
	<property name="cab2b.runtime.properties" location="${conf.dir}/cab2b_server.properties" />

	<property name="db.scripts.dir" location="db" />
	<property name="db.install.scripts.dir" location="${db.scripts.dir}/db-install" />
	<property name="db.install.mysql.scripts.dir" location="${db.install.scripts.dir}/mysql" />
	<property name="server.jar.dir" location="${workarea.dir}/serverJar" />
	<property name="server.jar.file" location="${workarea.dir}/cab2bServer.jar" />
	<property name="caB2B.standalone.jar.file" location="${workarea.dir}/cab2bStandAlone.jar" />

	<property name="client.jar.dir" location="${workarea.dir}/clientJar" />
	<property name="client.jar.file" location="${workarea.dir}/cab2bClient.jar" />
	<property name="client.setup.dir" location="${workarea.dir}/cab2bClientSetup" />

	<property name="standAlone.jar.dir" location="${workarea.dir}/cab2bStandAloneJar" />
	<property name="client.setup.zip.file" location="${workarea.dir}/cab2bClientSetup.zip" />

	<!--Properties set for checkstyle "PMD scans Java source code and looks for potential code problems"-->
	<!--Read for more details http://pmd.sourceforge.net/cpd.html -->
	<property name="pmd.report.dir" value="${reports.dir}/pmd" />
	<property name="pmd.report.file.full" value="${pmd.report.dir}/PmdFullReport.html" />
	<property name="pmd.report.file.classwise" value="${pmd.report.dir}/PmdClasswiseReport.html" />

	<!-- properties used for Java Web Start -->
	<!-- change the version values for every new release, else webstart will not deliver the latest changes !! -->
	<property name="webstart.client.version" value="1.0" />
	<property name="webstart.server.version" value="1.0" />
	<property name="webstart.src" location="${resource.dir}/webstart" />
	<property name="keystore" location="${webstart.src}/cab2bKeyStore" />
	<property name="webstart.dir" location="${workarea.dir}/webstart" />
	<property name="webstart.war.dir" location="${webstart.dir}/cab2b" />
	<property name="webstart.client.dir" location="${webstart.war.dir}/client" />
	<property name="webstart.server.dir" location="${webstart.war.dir}/server" />
	<property name="webstart.jnlp.dir" location="${webstart.war.dir}/jnlp" />
	<property name="webstart.client.jar" location="${webstart.client.dir}/cab2b_client_webstart.jar" />

	<property name="lib.dir" location="lib" />

	<property name="extra.lib.dir" location="${lib.dir}/extra" />
	<property name="common.lib.dir" location="${lib.dir}/common" />
	<property name="server.lib.dir" location="${lib.dir}/server" />
	<property name="client.lib.dir" location="${lib.dir}/client" />
	<property name="junit.lib.dir" location="${lib.dir}/junit" />
	<property name="hbm.dir" location="${server.src}/edu/wustl/cab2b/server/hbm" />

	<property name="cab2bwebapp.location" location="../cab2bWebApp" />
	<property name="cab2badmin.location" location="../cab2bAdmin" />

	<!-- Properties for 1.5 compilation-->
	<property name="client_1.5.classes.dir" location="${workarea.dir}/client_1.5/classes" />

	<path id="common.classpath">
		<fileset dir="${common.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${extra.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="client.classpath">
		<path refid="common.classpath" />
		<fileset dir="${client.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${common.classes.dir}" />
	</path>

	<path id="server.classpath">
		<path refid="common.classpath" />
		<fileset dir="${server.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="cactus.classpath">
		<fileset dir="${extra.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${client.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${junit.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${common.lib.dir}">
			<include name="**/*.jar" />
			<exclude name="ant-antlr-1.6.3.jar" />
		</fileset>

		<fileset dir="${server.lib.dir}">
			<include name="**/*.jar" />
			<exclude name="commons-logging.jar" />
			<exclude name="xercesImpl.jar" />
			<exclude name="jaxrpc.jar" />
			<exclude name="jboss-j2ee.jar" />
			<!-- exclude name="oracleDriver.jar" / -->
			<!-- exclude name="mysql-connector-java-5.0.8-bin.jar" /-->
		</fileset>

		<pathelement location="${testcase.properties.folder}" />
		<pathelement location="${client.classes.dir}" />
		<pathelement location="${server.classes.dir}" />
		<pathelement location="${common.classes.dir}" />
	</path>

	<path id="xdoclet.classpath">
		<path refid="server.classpath" />
		<fileset dir="${extra.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="mmcloader.classpath">
		<path refid="server.classpath" />
		<pathelement location="${conf.dir}" />
		<pathelement location="${server.classes.dir}" />
		<pathelement location="${common.classes.dir}" />
	</path>

	<!-- ================================================================================== -->
	<target name="initialize" depends="clean.all">
		<delete file="${conf.dir}/server.properties" />
		<delete file="${conf.dir}/cagrid.properties" />
		<delete file="${conf.dir}/client.properties" />
		<delete file="${conf.dir}/cab2b.properties" />

		<copy todir="${conf.dir}">
			<fileset dir="${resource.dir}/properties">
				<include name="*.properties" />
			</fileset>
		</copy>

		<replace file="${conf.dir}/cab2b.properties" token="@server.host@" value="${server-host}" />
		<replace file="${conf.dir}/cab2b.properties" token="@server.port@" value="${server-port}" />
		<replace file="${conf.dir}/cab2b.properties" token="@jndi.protocol@" value="${jndi.protocol}" />
		<replace file="${conf.dir}/cab2b.properties" token="@jndi.invoker.url@" value="${jndi.invoker.url}" />

		<replace file="${conf.dir}/cab2b.properties" token="@server.host@" value="${server-host}" />
		<replace file="${conf.dir}/cab2b.properties" token="@server.port@" value="${server-port}" />

		<replace file="${conf.dir}/client.properties" token="@grid.type@" value="${grid-type}" />

		<replace file="${conf.dir}/server.properties" token="@application.build@" value="Build: ${application.build} ${TODAY}" />
		<replace file="${conf.dir}/server.properties" token="@ds.name@" value="${ds-name}" />
		<replace file="${conf.dir}/server.properties" token="@db.loader@" value="${db-loader}" />
		<replace file="${conf.dir}/server.properties" token="@default.user@" value="${default-user}" />
		<replace file="${conf.dir}/server.properties" token="@server.host@" value="${server-host}" />
		<replace file="${conf.dir}/server.properties" token="@server.port@" value="${server-port}" />

		<replace file="${conf.dir}/cagrid.properties" token="@index.url@" value="${index-url}" />
		<replace file="${conf.dir}/cagrid.properties" token="@mms.url@" value="${mms-url}" />
		<replace file="${conf.dir}/cagrid.properties" token="@cds.uri@" value="${cds-namespace-uri}" />
		<replace file="${conf.dir}/cagrid.properties" token="@cadsr.url@" value="${cadsr-url}" />
		<replace file="${conf.dir}/cagrid.properties" token="@refresh.time@" value="${cadsr-refresh-time}" />
		<replace file="${conf.dir}/cagrid.properties" token="@policy@" value="${signing-policy}" />
		<replace file="${conf.dir}/cagrid.properties" token="@cert@" value="${cert}" />
		<replace file="${conf.dir}/cagrid.properties" token="@sync.file@" value="${sync-description-file}" />
		<replace file="${conf.dir}/cagrid.properties" token="@cds.url@" value="${cds-url}" />
		<replace file="${conf.dir}/cagrid.properties" token="@idP.url@" value="${idP-url}" />
		<replace file="${conf.dir}/cagrid.properties" token="@authentication.url@" value="${authentication-url}" />
		<replace file="${conf.dir}/cagrid.properties" token="@delegetee@" value="${delegetee-identifier}" />
		<replace file="${conf.dir}/cagrid.properties" token="@grid.cert@" value="${grid-cert}" />
		<replace file="${conf.dir}/cagrid.properties" token="@grid.key@" value="${grid-key}" />
	</target>

	<!-- ================================================================================== -->
	<target name="pmd" description="PMD scan Java source code and looks for potential code problems.">
		<path id="pmd.classpath">
			<fileset dir="${extra.lib.dir}">
				<include name="pmd-4.0.jar" />
				<include name="jaxen-1.1.jar" />
			</fileset>
		</path>
		<taskdef name="pmd" classpathref="pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask" />
		<delete dir="${pmd.report.dir}" />
		<mkdir dir="${pmd.report.dir}" />
		<pmd shortFilenames="true">
			<ruleset>basic</ruleset>
			<ruleset>braces</ruleset>
			<ruleset>clone</ruleset>
			<ruleset>codesize</ruleset>
			<ruleset>controversial</ruleset>
			<ruleset>coupling</ruleset>
			<ruleset>design</ruleset>
			<ruleset>finalizers</ruleset>
			<ruleset>imports</ruleset>
			<ruleset>j2ee</ruleset>
			<!--ruleset>javabeans</ruleset-->
			<ruleset>migrating</ruleset>
			<ruleset>naming</ruleset>
			<ruleset>strings</ruleset>
			<ruleset>unusedcode</ruleset>
			<ruleset>sunsecure</ruleset>

			<formatter type="summaryhtml" toFile="${pmd.report.file.full}" />
			<formatter type="vbhtml" toFile="${pmd.report.file.classwise}" />
			<fileset dir="${common.src}" includes="**/*.java" />
			<fileset dir="${server.src}" includes="**/*.java" />
			<fileset dir="${client.src}" includes="**/*.java" />
		</pmd>
	</target>

	<!-- ==============Cleans all the artifacts generated=============== 	-->
	<target name="clean.all">
		<ant inheritAll="false" inheritRefs="false" dir="${cab2badmin.location}" antfile="${cab2badmin.location}/build.xml" target="clean.all" />
		<echo message="Cleaned Admin" />

		<ant inheritall="false" inheritRefs="false" dir="${cab2bwebapp.location}" antfile="${cab2bwebapp.location}/build.xml" target="clean.all" />
		<echo message="Cleaned WebApp" />

		<delete includeemptydirs="true" dir="${workarea.dir}" />
		<delete>
			<fileset dir="${conf.dir}">
				<include name="cab2b.properties" />
				<include name="cagrid.properties" />
				<include name="client.properties" />
				<include name="server.properties" />
			</fileset>

			<!-- Somehow this is not able to delete this file
			fileset dir="${server.lib.dir}">
				<include name="cab2b-client.jar" />
			</fileset -->

			<fileset dir="${webstart.src}">
				<include name="*.class" />
			</fileset>
		</delete>
		<echo message="Cleaned caB2B" />
	</target>

	<!-- ================================================================================== -->
	<target name="compile.common">
		<mkdir dir="${common.classes.dir}" />
		<javac srcdir="${common.src}" target="1.5" destdir="${common.classes.dir}" fork="true" memoryMaximumSize="1024m" includes="**/*.java" debug="on" deprecation="true" classpathref="common.classpath" failonerror="true" nowarn="on" />
	</target>
	<!-- ================================================================================== -->
	<target name="compile.client" depends="compile.common">
		<mkdir dir="${client.classes.dir}" />
		<javac srcdir="${client.src}" destdir="${client.classes.dir}" fork="true" memoryMaximumSize="1024m" includes="**/*.java" debug="on" deprecation="true" classpathref="client.classpath" failonerror="true" nowarn="on" />
	</target>
	<!-- ================================================================================== -->
	<target name="compile.server" depends="compile.common">
		<mkdir dir="${server.classes.dir}" />
		<copy overwrite="true" todir="${server.classes.dir}">
			<fileset dir="${common.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<javac srcdir="${server.src}" target="1.5" destdir="${server.classes.dir}" fork="true" memoryMaximumSize="1024m" includes="**/*.java" debug="on" deprecation="true" classpathref="server.classpath" failonerror="true" nowarn="on" />

		<copy todir="${server.classes.dir}">
			<fileset dir="${server.src}">
				<include name="**/*.hbm.xml" />
			</fileset>
		</copy>
	</target>
	<!-- ================================================================================== -->
	<target name="compile.all" depends="clean.all,compile.client,compile.server" />
	<!-- ================================================================================== -->
	<target name="client.jar" depends="compile.client">
		<mkdir dir="${client.jar.dir}" />
		<mkdir dir="${client.jar.dir}/META-INF" />

		<copy todir="${client.classes.dir}">
			<fileset dir="${client.src}">
				<include name="**/*.png" />
			</fileset>
		</copy>

		<copy todir="${client.jar.dir}">
			<fileset dir="${common.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</copy>

		<copy todir="${client.jar.dir}">
			<fileset dir="${client.classes.dir}">
				<include name="**/*.class" />
				<include name="**/*.png" />
			</fileset>
		</copy>

		<jar basedir="${client.jar.dir}" destfile="${client.jar.file}">
			<manifest>
				<!-- attribute name="Built-By" value="${user.name}"/ -->
				<!-- need to remove this hardcoding of MANIFEST's Class-Path settings -->
				<attribute name="Main-Class" value="edu.wustl.cab2b.client.ui.mainframe.LoginFrame" />
				<attribute name="Class-Path" value="conf/ forms-1.0.7.jar HeatMap.jar idw-gpl.jar jai_codec.jar jai_core.jar jama.jar jcalendar-1.3.2.jar jcommon-1.0.9.jar jfreechart-1.0.5.jar commons-io-1.4.jar jibble.jar org-netbeans-graph-vmd.jar org-netbeans-graph.jar org-openide-util.jar swingx-2006_10_08.jar ant-antlr-1.6.3.jar antlr-2.7.5H3.jar caarray-common-extensions.jar cog-jglobus.jar commonpackage.jar commons-collections-3.2.jar dom4j-1.6.jar DynamicExtensions.jar jboss-ejb3.jar jbossall-client.jar jce-jdk13-125.jar  metadata.jar odmg.jar query.jar struts.jar washu-commons.jar   -lang.jar caGrid-cds-common-1.3.jar caGrid-cds-stubs-1.3.jar caGrid-gaards-core-1.3.jar caGrid-cds-client-1.3.jar caGrid-ServiceSecurityProvider-stubs-1.3.jar axis.jar caGrid-dorian-client-1.3.jar caGrid-authentication-service-stubs-1.3.jar caGrid-authentication-service-client-1.3.jar caGrid-authentication-service-common-1.3.jar wsrf_core.jar wsrf_core_stubs.jar caGrid-ServiceSecurityProvider-common-1.3.jar caGrid-ServiceSecurityProvider-client-1.3.jar addressing-1.0.jar cog-axis.jar commons-discovery.jar commons-lang.jar commons-logging.jar commons-logging-1.1.jar caGrid-metadata-security-1.3.jar wss4j.jar wsdl4j.jar caGrid-metadata-security-1.3.jar caGrid-metadata-common-1.3.jar puretls.jar cryptix32.jar cryptix-asn1.jar caGrid-opensaml-1.3.jar caGrid-dorian-stubs-1.2.jar caGrid-dorian-stubs-1.3.jar caGrid-dorian-common-1.3.jar caGrid-gridca-1.3.jar caGrid-core-1.3.jar caGrid-1.1-Introduce-1.1-serviceTools.jar caGrid-gts-client-1.3.jar caGrid-gts-common-1.3.jar caGrid-gts-stubs-1.3.jar caGrid-syncgts-client-1.3.jar caGrid-syncgts-common-1.3.jar  caGrid-syncgts-stubs-1.3.jar  log4j-1.2.14.jar hibernate3.jar  mobius_common_client-1.1.jar mobius_tools-1.1.jar xercesImpl.jar caGrid-metadatautils-1.3.jar caGrid-websso-client-1.3.jar  resources/images/" />
			</manifest>
		</jar>
	</target>


	<!-- ================================================================================== 
			This target build the ZIP file for caB2B client. 
			It has everything needed by caB2B client to launch
	================================================================================== 	-->
	<target name="build.client.setup.zip" depends="client.jar" description="Creates client setup ZIP file">
		<mkdir dir="${client.setup.dir}" />
		<mkdir dir="${client.setup.dir}/conf" />
		<mkdir dir="${client.setup.dir}/resources" />
		<mkdir dir="${client.setup.dir}/resources/images" />

		<move file="${client.jar.file}" todir="${client.setup.dir}" />

		<copy todir="${client.setup.dir}">
			<fileset dir="lib/common">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="lib/client">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<echo message="java -Xmx512m -Djavax.net.ssl.trustStore=./jssecacerts -Dorg.jboss.security.ignoreHttpsHost=true -jar cab2bClient.jar " file="${client.setup.dir}/run.bat" append="true" />
		<echo message="java -Xmx512m -Djavax.net.ssl.trustStore=./jssecacerts -Dorg.jboss.security.ignoreHttpsHost=true -jar cab2bClient.jar " file="${client.setup.dir}/run.sh" append="true" />

		<copy todir="${client.setup.dir}/conf">
			<fileset dir="${conf.dir}">
				<include name="Cab2bApplicationResources.properties" />
				<include name="cagrid.properties" />
				<include name="client.properties" />
				<include name="cab2b.properties" />
				<include name="dynamicUI.xml" />
				<include name="errorcodes.properties" />
				<include name="jndi.properties" />
				<include name="ResultConfiguration.xml" />
				<include name="cdsclient-config.wsdd" />
				<include name="log4j.properties" />
			</fileset>
		</copy>
		<copy file="${resource.dir}/certificate/cab2b-ssl.truststore" todir="${client.setup.dir}/conf" overwrite="true" />
		<mkdir dir="${client.setup.dir}/conf/production" />
		<mkdir dir="${client.setup.dir}/conf/training" />
		<copy todir="${client.setup.dir}/conf/production">
			<fileset dir="${conf.dir}/production">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${client.setup.dir}/conf/training">
			<fileset dir="${conf.dir}/training">
				<include name="*.*" />
			</fileset>
		</copy>

		<copy todir="${client.setup.dir}/resources/images">
			<fileset dir="${resource.dir}/images">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<zip destfile="${client.setup.zip.file}" basedir="${client.setup.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: set.cab2b.secure.conf                      
         - - - - - - - - - - - - - - - - - -->
	<target name="set.cab2b.secure.conf" if="jboss.ssl.enable.true">
		<property name="ejb.jboss.xml.file" location="${conf.dir}/ejb/ssl_jboss.xml" />
		<property name="invoker.service.xml.file" location="${conf.dir}/invoker_ssl_jboss-service.xml" />
		<property name="jboss.invoker.web.xml.file" location="${conf.dir}/invoker_ssl_web.xml" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: set.cab2b.insecure.conf                      
         - - - - - - - - - - - - - - - - - -->
	<target name="set.cab2b.insecure.conf" unless="jboss.ssl.enable.true">
		<!-- Properties for non secure JBoss, these propertyies are changed in target 'set.cab2b.secure.conf' if the jboss.ssl.enable is true -->
		<property name="ejb.jboss.xml.file" location="${conf.dir}/ejb/jboss.xml" />
		<property name="jboss.invoker.web.xml.file" location="${conf.dir}/invoker_web.xml" />
		<property name="invoker.service.xml.file" location="${conf.dir}/invoker_jboss-service.xml" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: set.condition                      
         - - - - - - - - - - - - - - - - - -->
	<target name="set.condition">
		<condition property="jboss.ssl.enable.true">
			<equals arg1="${jboss.ssl.enable}" arg2="true" />
		</condition>
	</target>

	<!-- ================================================================================== -->
	<target name="server.jar" depends="set.condition,set.cab2b.secure.conf,set.cab2b.insecure.conf">
		<echo message="${jboss.ssl.enable.true}" />
		<mkdir dir="${server.jar.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${server.jar.dir}">
				<include name="**/*" />
			</fileset>
		</delete>

		<mkdir dir="${server.jar.dir}/META-INF" />

		<copy file="${ejb.jboss.xml.file}" tofile="${server.jar.dir}/META-INF/jboss.xml" />
		<copy file="${conf.dir}/ejb/ejb-jar.xml" tofile="${server.jar.dir}/META-INF/ejb-jar.xml" />

		<copy todir="${server.jar.dir}">
			<fileset dir="${server.classes.dir}">
				<include name="**/*.class" />
				<include name="**/*.hbm.xml" />
				<exclude name="**/*Test.class" />
			</fileset>
		</copy>

		<copy todir="${server.jar.dir}">
			<fileset dir="${conf.dir}">
				<include name="*.wsdd" />
				<include name="mapping.dtd" />
				<include name="cab2b.properties" />
				<include name="*.cfg.xml" />
				<include name="dbutil.properties" />
				<include name="server.properties" />
				<include name="EntityToAnalyticalServiceMapping.xml" />
				<include name="ResultConfiguration.xml" />
				<include name="cagrid.properties" />
			</fileset>
		</copy>

		<mkdir dir="${server.jar.dir}/production" />
		<copy todir="${server.jar.dir}/production">
			<fileset dir="${conf.dir}/production">
				<include name="*.*" />
			</fileset>
		</copy>

		<replace file="${server.jar.dir}/hibernate.cfg.xml" token="DS-NAME" value="${ds-name}" />
		<jar basedir="${server.jar.dir}" destfile="${server.jar.file}" />
	</target>
	<!-- ==================================================================================
					EAR structure
    cab2bServer.ear 
     |     
     |__META-INF
     |    |__ application.xml
     |
     |__cab2bServer.jar
          |__ classes(this is not a dir)
          |
          |__ META-INF
                |_ejb-jar.xml
   "Creates a deployable EAR file using server and common classes"
   =================================================================================-->
	<target name="build.ear" depends="server.jar">
		<mkdir dir="${ear.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${ear.dir}">
				<include name="**/*" />
			</fileset>
		</delete>

		<copy overwrite="true" file="${server.jar.file}" todir="${ear.dir}" />
		<copy todir="${ear.dir}" overwrite="true">
			<fileset dir="lib/common">
				<include name="**/*.jar" />
				<exclude name="hibernate3.jar" />
				<exclude name="ant-antlr-1.6.3.jar" />
				<exclude name="jbossall-client.jar" />
				<exclude name="commons-logging-1.0.4.jar" />
				<exclude name="log4j-1.2.14.jar" />
			</fileset>

			<fileset dir="lib/server">
				<include name="**/*.jar" />
				<exclude name="commons-logging.jar" />
				<exclude name="jaxrpc.jar" />
				<exclude name="jboss-j2ee.jar" />
				<exclude name="oracleDriver.jar" />
				<exclude name="mysql-connector-java-5.0.8-bin.jar" />
			</fileset>
		</copy>
		<ear basedir="${ear.dir}" destfile="${ear.file}" appxml="${conf.dir}/application.xml" includes="**/*.*" />
	</target>

	<!-- ===========================================================================
					Deploy
	================================================================================ -->
	<!-- target name="deploy.jboss" depends="clean.all,build.ear,update.server,replace.datasource" description="Deploys EAR file to JBoss application server" /-->
	<!-- ================================================================================== -->
	<!--target name="update.server">
		<delete dir="${jboss.home}/server/default/tmp/deploy" />
		<copy overwrite="true" file="${ear.file}" todir="${jboss.deploy.dir}" />
		<copy overwrite="true" file="${cab2bDS.file}" todir="${jboss.deploy.dir}" />
		<copy overwrite="true" file="${jbossjca.service.xml}" todir="${jboss.deploy.dir}" />
		<copy overwrite="true" file="lib/server/oracleDriver.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/server/mysql-connector-java-5.0.8-bin.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/hibernate3.jar" todir="${jboss.common.lib.dir}" />

		<copy overwrite="true" file="lib/common/cog-jglobus.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/cryptix32.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/cryptix-asn1.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/jce-jdk13-125.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/puretls.jar" todir="${jboss.common.lib.dir}" />

		<mkdir dir="${jboss.home}/server/default/log" />
		<echo message="" file="${jboss.log.dir}/caB2B.log" append="false" />
	</target-->

	<!-- ================================================================================== 
			"Drops existing database and create new database with schema"
	================================================================================== 	-->
	<target name="create.database">
		<echo>Creating cab2b database...</echo>
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.server.ip}:${database.server.port}/" userid="${database.username}" password="${database.password}" onerror="continue" classpathref="server.classpath">			
			DROP DATABASE ${database.name};
			CREATE DATABASE ${database.name};
		</sql>

		<echo>Creating schema in cab2b database...</echo>
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.server.ip}:${database.server.port}/${database.name}" userid="${database.username}" password="${database.password}" onerror="continue" classpathref="server.classpath">
			<fileset dir="${db.scripts.dir}">
				<include name="*.sql" />
			</fileset>
		</sql>
	</target>

	<!-- ================================================================================== -->
	<target name="create.metadata">
		<echo>Creating cab2b database...</echo>
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.server.ip}:${database.server.port}/" userid="${database.username}" password="${database.password}" onerror="continue" classpathref="server.classpath">			
					DROP DATABASE IF EXISTS ${database.name};
					CREATE DATABASE ${database.name};
				</sql>

		<echo>Creating schema in cab2b database...</echo>
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.server.ip}:${database.server.port}/${database.name}" userid="${database.username}" password="${database.password}" onerror="continue" classpathref="server.classpath">
			<fileset dir="${metadata.loader.dir}">
				<include name="${metadata.loader.file}" />
			</fileset>
		</sql>
	</target>

	<!-- ==================================================================================
	<macrodef name="replace.db.properties.macro">
		<attribute name="cfgfile" />
		<sequential>
			<echo message="Putting database information in file @{cfgfile}" />
			<replace file="@{cfgfile}" token="server-ip" value="${database.server.ip}" />
			<replace file="@{cfgfile}" token="port" value="${database.server.port}" />
			<replace file="@{cfgfile}" token="database-name" value="${database.name}" />
			<replace file="@{cfgfile}" token="user_name" value="${database.username}" />
			<replace file="@{cfgfile}" token="user_password" value="${database.password}" />
			<replace file="@{cfgfile}" token="DS-NAME" value="${ds-name}" />
		</sequential>
	</macrodef>
	
	<target name="build.paths" depends="create.database,clean.all,compile.server">
		<copy todir="${server.classes.dir}">
			<fileset dir="${conf.dir}">
				<include name="*.wsdd" />
				<include name="*.cfg.xml" />
				<include name="dbutil.properties" />
				<include name="cab2b.properties" />
				<include name="server.properties" />
				<include name="EntityToAnalyticalServiceMapping.xml" />
				<include name="ResultConfiguration.xml" />

			</fileset>
		</copy>

		<replace.db.properties.macro cfgfile="${server.classes.dir}/${install.hibernate.cfg}" />
		<echo message="hibernate.configuration.files = dehibernate.cfg.xml,installHibernate.cfg.xml" file="${server.classes.dir}/dbutil.properties" append="false" />

		<echo message="Loading models and paths to database..." />
		<java classname="edu.wustl.cab2b.server.path.PathBuilder" classpathref="pathbuilder.classpath" fork="yes" />
		<path id="pathbuilder.classpath">
			<path refid="server.classpath" />
			<pathelement location="${workarea.dir}/common/classes" />
			<pathelement location="${workarea.dir}/server/classes" />
		</path>
	</target>
	================================================================================== -->

	<!-- ============================================================================
	 			Cactus TESTS
	================================================================================= -->
	<taskdef resource="cactus.tasks" classpathref="cactus.classpath" />

	<target name="run.cactus">
		<mkdir dir="${cactusReports.dir}/cactusReports/Reports" />
		<cactus earfile="${jboss.home}/server/default/deploy/cab2bServer.ear" fork="yes" failureproperty="cactus.failed" haltonerror="false">
			<classpath refid="cactus.classpath" />

			<containerset>
				<generic startuptarget="jboss.start" shutdowntarget="jboss.stop" name="cab2b" todir="${cactusReports.dir}/cactusReports" />
			</containerset>

			<formatter type="brief" usefile="false" />
			<formatter type="xml" />

			<batchtest>
				<fileset dir="${server.classes.dir}" includes="${Test.Includes}" />
				<fileset dir="${client.classes.dir}" includes="${Test.Includes}" />
				<fileset dir="${common.classes.dir}" includes="${Test.Includes}" />
			</batchtest>
		</cactus>
		<antcall target="cactus.report" />
	</target>

	<target name="cactus.report">
		<mkdir dir="${cactusReports.dir}/cactusReports/Reports" />
		<junitreport todir="${cactusReports.dir}/cactusReports/Reports">
			<fileset dir="${cactusReports.dir}/cactusReports">
				<include name="*.*" />
			</fileset>
			<report format="frames" todir="${cactusReports.dir}/cactusReports/Reports" />
		</junitreport>
	</target>

	<target name="cactus.verify" depends="run.cactus" if="cactus.failed">
		<!-- echo message="false" file="${MailLogger.junittest}" / -->
	</target>

	<target name="deploy.reports">
		<mkdir dir="${build.log.dir}" />
		<copy file="build\log.xsl" tofile="${build.log.dir}\log.xsl" />
		<copy file="build\index.html" todir="${reports.dir}" overwrite="true" />
		<mkdir dir="${reports.dir}/images" />
		<copy overwrite="true" todir="${reports.dir}/images">
			<fileset dir="build/images">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<mkdir dir="${reports.dir}/WEB-INF" />
		<zip basedir="${workarea.dir}/reports" destfile="${workarea.dir}/${TODAY}.zip" />
	</target>

	<!-- ================================================================================== -->
	<!-- If there is following error in javaDoc target 
				java.util.MissingResourceException: 
						Can't find resource for bundle 
						com.sun.tools.doclets.formats.html.resources.standard, 
						key doclet.malformed_html_link_tag
		Its bug in JDK...please refer to 
		http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5082928 for details-->
	<target name="javadoc" description="Generate the documentation for entire caB2B source code">
		<mkdir dir="${javadoc.dir}" />
		<javadoc access="private" packagenames="edu.*" destdir="${javadoc.dir}" author="true" version="true" windowtitle="caB2B" maxmemory="512m" breakiterator="yes" useexternalfile="yes">

			<fileset dir="source" defaultexcludes="yes">
				<include name="common/main/edu/wustl/**/*.java" />
				<include name="client/main/edu/wustl/**/*.java" />
				<include name="server/main/edu/wustl/**/*.java" />
			</fileset>
			<bottom>
				<![CDATA[<i>
				<b>Copyright text will go here @ <br>ca Bench to Bedside.Some thing for javadoc</b>
				</i>]]>
			</bottom>
		</javadoc>
	</target>

	<!-- ======================Target for compiling client using JDK 1.5====================== -->
	<target name="compile.client_1.5" depends="compile.common">
		<mkdir dir="${client_1.5.classes.dir}" />

		<javac srcdir="${client.src}" target="1.5" destdir="${client_1.5.classes.dir}" fork="true" debug="on" deprecation="true" classpathref="client.classpath" failonerror="true" nowarn="on">
			<exclude name="edu/wustl/cab2b/client/ui/controls/sheet/**/*.java" />
			<exclude name="edu/wustl/cab2b/client/ui/experiment/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/mainframe/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/mysettings/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/viewresults/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/visualization/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/cache/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/parameterizedQuery/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/main/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/pagination/**/*.*" />
			<exclude name="edu/wustl/cab2b/client/ui/searchDataWizard/**/*.*" />

			<exclude name="**/ServiceInstanceConfigurator.java" />
			<exclude name="**/MatrixCache.java" />
			<exclude name="**/ClientQueryBuilder.java" />
			<exclude name="**/TransformCategoryResult.java" />
			<exclude name="**/B2BNewModel.java" />
			<exclude name="**/B2BTreeNode.java" />
			<exclude name="**/CommonUtils.java" />
			<exclude name="**/CustomSwingWorker.java" />

			<exclude name="**/SearchNavigationPanel.java" />
			<exclude name="**/ShowDCQLPanel.java" />
		</javac>
	</target>
	<!-- ================================================================================== -->
	<target name="build.standalone.jar" depends="compile.client_1.5,compile.server" description="Generate the jar of client,common and server classes which will in standalone manner">
		<mkdir dir="${standAlone.jar.dir}" />
		<copy todir="${standAlone.jar.dir}" overwrite="true">
			<fileset dir="${common.classes.dir}">
				<exclude name="**/ejb/**/*.*" />
			</fileset>
			<fileset dir="${client_1.5.classes.dir}">
				<exclude name="**/ejb/**/*.*" />
			</fileset>
			<fileset dir="${server.classes.dir}">
				<exclude name="**/ejb/**/*.*" />
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="cab2b.properties" />
				<include name="cagrid.properties" />
			</fileset>
		</copy>
		<jar basedir="${standAlone.jar.dir}" destfile="${caB2B.standalone.jar.file}">
			<manifest>
				<attribute name="Built-At-" value="${TODAY} ${TSTAMP}" />
			</manifest>
		</jar>
	</target>

	<!-- ================================================================================== -->
	<target name="run.cab2b.client" depends="compile.client" description="Run the sample Client">
		<echo message="Running the java code" />
		<java classname="edu.wustl.cab2b.client.ui.mainframe.LoginFrame" classpathref="run.client.classpath" fork="yes" />
	</target>

	<path id="run.client.classpath">
		<path refid="client.classpath" />
		<pathelement location="${workarea.dir}/common/classes" />
		<pathelement location="${workarea.dir}/client/classes" />
		<pathelement location="${conf.dir}" />
		<pathelement location="resources/images" />
	</path>

	<!-- ==========================================================-->
	<!-- create the client jar for Java Web Start deployment.      -->
	<!-- ==========================================================-->
	<target name="build.client.webstart.war">
		<mkdir dir="${client.jar.dir}" />
		<mkdir dir="${webstart.client.dir}" />
		<mkdir dir="${webstart.jnlp.dir}" />

		<mkdir dir="${webstart.war.dir}/WEB-INF" />
		<mkdir dir="${webstart.war.dir}/conf" />

		<!-- copy jnlp to workarea and then replace the server place holder-->
		<copy todir="${webstart.dir}">
			<fileset dir="${webstart.src}">
				<include name="*.jnlp" />
			</fileset>
		</copy>

		<replaceregexp byline="true" flags="g">
			<fileset dir="${webstart.dir}">
				<include name="*.jnlp" />
			</fileset>
			<regexp pattern="@server-address@" />
			<substitution expression="${jndi.protocol}://${webstart.server.host}:${webstart.server.port}" />
		</replaceregexp>
		<!-- done replacing-->

		<copy todir="${client.jar.dir}">
			<fileset dir="${client.classes.dir}">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="${client.src}">
				<include name="**/*.png" />
			</fileset>
		</copy>

		<!--- create the images.jar and conf.jar to include in the client jar folder -->
		<jar basedir="${conf.dir}" destfile="${webstart.client.dir}/conf.jar">
			<include name="**/*.*" />
		</jar>
		<jar basedir="${resource.dir}/images" destfile="${webstart.client.dir}/images.jar">
			<include name="**/*" />
		</jar>

		<copy toDir="${webstart.client.dir}">
			<fileset dir="${lib.dir}/client">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${lib.dir}/common">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<!-- compile JNLPBuilder -->
		<javac srcdir="${webstart.src}" includes="JNLPBuilder.java" failonerror="true" classpathref="server.classpath" />

		<!-- create JNLP's for all the jars and modify the client jar's JNLP accordingly -->
		<java classname="JNLPBuilder" failonerror="true">
			<classpath>
				<path refid="server.classpath" />
				<pathelement location="${webstart.src}" />
			</classpath >
			<arg value="${webstart.dir}/template.jnlp" />
			<arg value="${webstart.dir}/client.jnlp" />
			<arg value="${webstart.client.dir}" />
			<arg value="${webstart.jnlp.dir}" />
		</java>

		<echo message="JNLPBuilder finished its task" />

		<!-- make the client jar only after other jars have been copied and JNLP's have been created
				in order to avoid creating a new JNLP for the client jar -->
		<jar basedir="${client.jar.dir}" destfile="${webstart.client.jar}">
			<include name="**/*" />
		</jar>

		<!-- sign all the jars -->
		<signjar alias="caB2Bv2.1" storepass="cab2b123" keystore="${keystore}">
			<fileset dir="${webstart.client.dir}">
				<include name="**/*.jar" />
			</fileset>
		</signjar>

		<!-- copy the images to be used by Web Start -->
		<copy todir="${webstart.client.dir}" file="${resource.dir}/images/CaB2B_48_48_bg.gif" />
		<copy todir="${webstart.client.dir}" file="${resource.dir}/images/CaB2B_32_32_bg.gif" />
		<copy todir="${webstart.war.dir}/conf">
			<fileset dir="${conf.dir}">
				<include name="cab2b.properties" />
			</fileset>
		</copy>
		<copy todir="${webstart.war.dir}" file="${webstart.src}/index.html" />

		<war destfile="${workarea.dir}/cab2b.war" webxml="${webstart.src}/web.xml">
			<fileset dir="${webstart.src}">
				<include name="images/**/*" />
			</fileset>
			<fileset dir="${webstart.war.dir}">
			</fileset>
		</war>
	</target>

	<!-- ================================================================================== -->
	<target name="build.project.jar" depends="compile.client,compile.server">
		<jar basedir="${workarea.dir}/common/classes" destfile="${workarea.dir}/cab2b-common.jar">
			<include name="**/*.*" />
		</jar>
		<jar basedir="${workarea.dir}/server/classes" destfile="${workarea.dir}/cab2b-server.jar">
			<include name="**/*.*" />
		</jar>
		<jar basedir="${workarea.dir}/client/classes" destfile="${workarea.dir}/cab2b-client.jar">
			<include name="**/*.*" />
		</jar>
		<copy file="${workarea.dir}/cab2b-client.jar" todir="${server.lib.dir}" />
	</target>

	<!-- ================================================================================== -->
	<target name="generate.query.hbm" description="Generates Hibernate class descriptor files.">
		<!-- Define the hibernatedoclet task -->
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
			<classpath refid="xdoclet.classpath" />
		</taskdef>

		<!-- Execute the hibernatedoclet task -->
		<hibernatedoclet destdir="${common.src}" excludedtags="@version,@author,@todo" force="${generateforce}" mergedir="${common.src}" verbose="false">
			<!--fileset dir="${common.src}">
				<include name="**/edu/wustl/cab2b/common/domain/*.java" />
			</fileset>
			<fileset dir="${common.src}">
				<include name="**/edu/wustl/cab2b/common/queryengine/Cab2bQuery.java" />
			</fileset>
			<fileset dir="${common.src}">
				<include name="**/edu/wustl/cab2b/common/user/*.java" />
			</fileset>
			<fileset dir="${common.src}">
				<include name="**/edu/wustl/cab2b/common/category/*.java" />
			</fileset-->
			<fileset dir="${common.src}">
				<include name="**/edu/wustl/cab2b/common/user/*.java" />
			</fileset>
			<hibernate version="2.0" />
		</hibernatedoclet>

		<!-- Upgrade grammar from Hibernate2 to Hibernate3 -->
		<replace dir="${common.src}">
			<include name="**/edu/wustl/cab2b/common/domain/*hbm.xml" />
			<include name="**/edu/wustl/cab2b/common/queryengine/*hbm.xml" />
			<include name="**/edu/wustl/cab2b/common/user/*hbm.xml" />
			<include name="**/edu/wustl/cab2b/common/category/*hbm.xml" />

			<replacefilter token="readonly=" value="inverse=" />
			<replacefilter token="role=" value="name=" />
			<replacefilter token="hibernate-mapping-2.0.dtd" value="hibernate-mapping-3.0.dtd" />
			<replacefilter token="&lt;hibernate-mapping&gt;" value="&lt;hibernate-mapping default-lazy=&quot;false&quot;&gt;" />
		</replace>

		<copy todir="${hbm.dir}" overwrite="true">
			<fileset dir="${common.src}/edu/wustl/cab2b/common/domain">
				<include name="*.hbm.xml" />
			</fileset>
			<fileset dir="${common.src}/edu/wustl/cab2b/common/queryengine">
				<include name="*.hbm.xml" />
			</fileset>
			<fileset dir="${common.src}/edu/wustl/cab2b/common/user">
				<include name="*.hbm.xml" />
			</fileset>
			<fileset dir="${common.src}/edu/wustl/cab2b/common/category">
				<include name="*.hbm.xml" />
			</fileset>
		</copy>

		<delete>
			<fileset dir="${common.src}" includes="**/*.hbm.xml" />
		</delete>
	</target>

	<target name="generate.mmc.hbm" description="Generates Hibernate class descriptor files.">
		<!-- Define the hibernatedoclet task -->
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
			<classpath refid="xdoclet.classpath" />
		</taskdef>

		<!-- Execute the hibernatedoclet task -->
		<hibernatedoclet destdir="${server.src}" excludedtags="@version,@author,@todo" force="${generateforce}" mergedir="${server.src}" verbose="false">
			<fileset dir="${server.src}">
				<include name="**/edu/wustl/cab2b/server/category/multimodelcategory/*.java" />
			</fileset>
			<hibernate version="2.0" />
		</hibernatedoclet>

		<!-- Upgrade grammar from Hibernate2 to Hibernate3 -->
		<replace dir="${server.src}">
			<include name="**/edu/wustl/cab2b/server/category/multimodelcategory/*hbm.xml" />

			<replacefilter token="readonly=" value="inverse=" />
			<replacefilter token="role=" value="name=" />
			<replacefilter token="hibernate-mapping-2.0.dtd" value="hibernate-mapping-3.0.dtd" />
			<replacefilter token="&lt;hibernate-mapping&gt;" value="&lt;hibernate-mapping default-lazy=&quot;false&quot;&gt;" />
		</replace>

		<copy todir="${hbm.dir}" overwrite="true">
			<fileset dir="${server.src}/edu/wustl/cab2b/server/category/multimodelcategory">
				<include name="*.hbm.xml" />
			</fileset>
		</copy>

		<delete>
			<fileset dir="${server.src}" includes="**/edu/wustl/cab2b/server/category/multimodelcategory/*.hbm.xml" />
		</delete>
	</target>

	<!-- ================================================================================== -->
	<target name="generate.mmc.schema.mysql">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">
			<classpath>
				<pathelement location="${server.classes.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<path refid="xdoclet.classpath" />
			</classpath>
		</taskdef>

		<schemaexport properties="conf/mysql_db.properties" quiet="yes" text="yes" delimiter=";" output="scripts/mmc_mysql.sql">
			<fileset dir="${hbm.dir}">
				<include name="MultiModelCategoryImpl.hbm.xml" />
				<include name="MultiModelAttributeImpl.hbm.xml" />
			</fileset>
		</schemaexport>
	</target>

	<!-- ================================================================================== -->
	<target name="generate.query.schema.mysql">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">
			<classpath>
				<pathelement location="${common.classes.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<path refid="xdoclet.classpath" />
			</classpath>
		</taskdef>

		<schemaexport properties="conf/mysql_db.properties" quiet="yes" text="yes" delimiter=";" output="scripts/query_mysql.sql">
			<fileset dir="${hbm.dir}">
				<include name="*.hbm.xml" />
			</fileset>
		</schemaexport>
	</target>

	<!-- ================================================================================== -->
	<target name="generate.query.schema.oracle">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">
			<classpath>
				<pathelement location="${common.classes.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<path refid="xdoclet.classpath" />
			</classpath>
		</taskdef>

		<schemaexport properties="conf/oracle_db.properties" quiet="yes" text="yes" delimiter=";" output="scripts/query_oracle.sql">
			<fileset dir="${hbm.dir}">
				<include name="*.hbm.xml" />
			</fileset>
		</schemaexport>
	</target>

	<!-- ======================Target for creating cab2b.war====================== -->
	<target name="create.cab2b.war" depends="build.client.setup.zip,build.client.webstart.war">
		<war destfile="${workarea.dir}/cab2b.war" update="true">
			<fileset dir="${workarea.dir}/" id="id">
				<include name="cab2bClientSetup.zip" />
			</fileset>
		</war>
	</target>

	<!-- =========================================================================================== -->
	<macrodef name="replace.application.xml">
		<attribute name="applicationfile" />
		<sequential>
			<echo message="Editing Application.xml file" />
			<replace file="@{applicationfile}" token="&lt;application&gt;" value="&lt;application&gt;
				&lt;module id=&quot;adminModule_1233568391515&quot;&gt;
				&lt;web&gt;
				&lt;web-uri&gt;cab2badmin.war&lt;/web-uri&gt;
				&lt;context-root&gt;cab2b/admin&lt;/context-root&gt;
				&lt;/web&gt;
				&lt;/module&gt;
				
				&lt;module id=&quot;WebModule_1233568391515&quot;&gt;
				&lt;web&gt;
				&lt;web-uri&gt;cab2bWebApp.war&lt;/web-uri&gt;
				&lt;context-root&gt;cab2b&lt;/context-root&gt;
				&lt;/web&gt;
				&lt;/module&gt;
				
				&lt;module id=&quot;cab2b_1233568391515&quot;&gt;
				&lt;web&gt;
				&lt;web-uri&gt;cab2b.war&lt;/web-uri&gt;
				&lt;context-root&gt;cab2b/webpage&lt;/context-root&gt;
				&lt;/web&gt;
				&lt;/module&gt; " />
		</sequential>
	</macrodef>

	<!-- ================Target for deploying all 3 modules of cab2b =============================== -->
	<target name="dist" depends="build.all,distribute" description="Creates the distribution unit and copy all ariticats to distribution folder" />

	<target name="build.all" depends="initialize,build.project.jar,build.ear" description="Builds the distribution unit i.e., a complete cab2bServer.ear">
		<ant inheritAll="false" inheritRefs="true" antfile="${cab2badmin.location}/build.xml" target="war" dir="${cab2badmin.location}">
			<property name="ds-name" value="${ds-name}" />
		</ant>
		<echo message="Admin War Created" />

		<ant antfile="${cab2bwebapp.location}/build.xml" dir="${cab2bwebapp.location}" target="war" inheritall="false" />
		<echo message="caB2B Web App War Created" />

		<delete>
			<fileset dir="${workarea.dir}">
				<include name="cab2b-common.jar" />
				<include name="cab2b-server.jar" />
				<include name="cab2b-client.jar" />
			</fileset>
		</delete>

		<move file="${ear.file}" todir="." />
		<antcall target="create.cab2b.war" />
		<move file="./cab2bServer.ear" todir="${workarea.dir}" />

		<unjar src="${ear.file}" dest="${workarea.dir}/cab2bServer" />
		<replace.application.xml applicationfile="${workarea.dir}/cab2bServer/META-INF/application.xml" />
		<copy file="${cab2badmin.location}/build/cab2badmin.war" todir="${workarea.dir}/cab2bServer" />
		<copy file="${cab2bwebapp.location}/build/cab2bWebApp.war" todir="${workarea.dir}/cab2bServer" />
		<copy file="${workarea.dir}/cab2b.war" todir="${workarea.dir}/cab2bServer" />
		<delete file="${ear.file}" />
		<ear basedir="${workarea.dir}/cab2bServer" destfile="${ear.file}" appxml="${workarea.dir}/cab2bServer/META-INF/application.xml" includes="**/*.*" />
	</target>

	<target name="distribute">
		<copy file="${workarea.dir}/cab2bServer.ear" todir="${dist.dir}" />
		<copy file="${jbossjca.service.xml}" todir="${dist.dir}" />
		<copy file="${log4j.xml.file}" todir="${dist.dir}" />
		<copy file="${tomcat.web.xml.file}" tofile="${dist.dir}/web.xml" />
		<copy file="${jboss.invoker.web.xml.file}" tofile="${dist.dir}/invoker_web.xml" />
		<copy file="${invoker.service.xml.file}" tofile="${dist.dir}/jboss-service.xml" />

		<copy file="${lib.dir}/server/oracleDriver.jar" todir="${dist.dir}" />
		<copy file="${lib.dir}/server/mysql-connector-java-5.0.8-bin.jar" todir="${dist.dir}" />
		<copy file="${lib.dir}/common/hibernate3.jar" todir="${dist.dir}" />

		<copy file="${lib.dir}/common/cog-jglobus.jar" todir="${dist.dir}" />
		<copy file="${lib.dir}/common/cryptix32.jar" todir="${dist.dir}" />
		<copy file="${lib.dir}/common/cryptix-asn1.jar" todir="${dist.dir}" />
		<copy file="${lib.dir}/common/jce-jdk13-125.jar" todir="${dist.dir}" />
		<copy file="${lib.dir}/common/puretls.jar" todir="${dist.dir}" />
	</target>

	<!--==========================================================================
		Developer's deployment target. This must be used by developers to 
		install/deploy caB2B locally. Unlike BDA, this is not going to download
		the JBoss on its own. It's developer's responsibility to setup JBoss and
		define its path. 
	 ===========================================================================-->
	
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>
	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}" />

	<property name="jboss.common.lib.dir" location="${jboss.home}/server/${jboss.server.name}/lib" />
	<property name="jboss.deploy.dir" location="${jboss.home}/server/${jboss.server.name}/deploy" />
	<property name="jboss.log.dir" location="${jboss.home}/server/${jboss.server.name}/log" />

	<property name="cab2b.ds.file" value="cab2b-ds.xml" />
	<property name="cab2b.ds.from.path" location="../common/resources/jboss-conf" />
	<property name="cab2b.ds.to.path" location="${jboss.home}/server/${jboss.server.name}/deploy" />

	<property name="ds-name" value="${application.context.name}" />
	<property name="server-port" value="${jboss.server.port}" />

	<target name="dev.deploy" depends="build.all" description="Deploys EAR file to JBoss application server">
		<delete dir="${jboss.home}/server/default/tmp/deploy" />

		<copy overwrite="true" file="${jbossjca.service.xml}" todir="${jboss.deploy.dir}" />
		<copy overwrite="true" file="${log4j.xml.file}" todir="${jboss.home}/server/${jboss.server.name}/conf" />
		<copy overwrite="true" file="${cab2b.runtime.properties}" todir="${jboss.home}/server/${jboss.server.name}/conf" />
		<copy overwrite="true" file="lib/server/oracleDriver.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/server/mysql-connector-java-5.0.8-bin.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/hibernate3.jar" todir="${jboss.common.lib.dir}" />

		<copy overwrite="true" file="lib/common/cog-jglobus.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/cryptix32.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/cryptix-asn1.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/jce-jdk13-125.jar" todir="${jboss.common.lib.dir}" />
		<copy overwrite="true" file="lib/common/puretls.jar" todir="${jboss.common.lib.dir}" />

		<mkdir dir="${jboss.log.dir}" />
		<echo message="" file="${jboss.log.dir}/caB2B.log" append="false" />

		<copy file="${cab2b.ds.from.path}/${cab2b.ds.file}" todir="${cab2b.ds.to.path}" overwrite="true" />
		<replace file="${cab2b.ds.to.path}/${cab2b.ds.file}" token="@application.context.name@" value="${application.context.name}" />
		<replace file="${cab2b.ds.to.path}/${cab2b.ds.file}" token="@database.url@" value="${database.url}" />
		<replace file="${cab2b.ds.to.path}/${cab2b.ds.file}" token="@database.user@" value="${database.user}" />
		<replace file="${cab2b.ds.to.path}/${cab2b.ds.file}" token="@database.password@" value="${database.password}" />
		<replace file="${cab2b.ds.to.path}/${cab2b.ds.file}" token="@database.driver@" value="com.mysql.jdbc.Driver" />

		<copy overwrite="true" file="${ear.file}" todir="${jboss.deploy.dir}" />
	</target>
	
	<target name="load.mmcs" depends="compile.server" description="Loads the MultiModelCategories">
		<java failonerror="true" classname="edu.wustl.cab2b.server.multimodelcategory.PersistMultiModelCategory" classpathref="mmcloader.classpath" fork="yes">
			<jvmarg value="-Xmx768m"/>
			<arg value="${mmc.dir}"/>
		</java>
	</target>
</project>

<!-- ==================================================================================
DO NOT DELETE THIS COMMENT. 
It is file to be shipped with client to provide launching client using ANT
================================================================================== -->
<!--
<?xml version="1.0" encoding="UTF-8"?>
<project name="caB2B" basedir="." default="run.client">
	<path id="run.classpath">
	      <pathelement location="conf" />
	      <fileset dir=".">
			<include name="**/*.jar" />
	      </fileset>
	</path>
	<target name="run.client" description="Installs and runs the caB2B client">
        <java classname="edu.wustl.cab2b.client.ui.mainframe.MainFrame" classpathref="run.classpath" fork="yes" /> 
	</target>
</project>
-->
