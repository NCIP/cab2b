/*
 * MagnifyingButton.java
 *
 * Created on November 13, 2007, 11:25 AM
 */
package edu.wustl.cab2b.client.ui.controls.sheet;

import java.awt.*;
import java.awt.geom.*;
import javax.swing.JFrame;

/**
 *
 * @author  jasbir_sachdeva
 */
public class MagnifyingButton extends javax.swing.JButton {

    //  State Attributes...

    Rectangle2D joint, handle, handleShine;
    Ellipse2D glass;
    double topGap;
    double glassRadii;
    double bottomGap;
    Color handleShineColor;
    Color handleColor;
    Color glassViewColorCurrent;
    Color glassViewColorHighlighted;
    Color glassViewColorNormal;
    
    Stroke glassBS;
    /** By default Magnifying glass is in standing position. 
     * By setting it true it will be rotated towards left by right angle.   */
    boolean rotateGlass = true;
    double rotationAngle = -Math.PI * 20 / 360;
    double scaleFactor = 1;

    //  Container dimention...

    int cW;
    int cH;

    /** Creates new form MagnifyingButton */
    public MagnifyingButton() {
        this("");
    }
    
    /** Creates new form MagnifyingButton */
    public MagnifyingButton( String label) {
        super( label);
        initComponents();

        //  Original Drawing Guidelines...
        cH = 600;
        cW = 600;
        reset();
        setupColors();
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(20, 20));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_formComponentResized

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_formAncestorAdded

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
    // TODO add your handling code here:
        glassViewColorCurrent = glassViewColorHighlighted;
        repaint();
        
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
    // TODO add your handling code here:
        glassViewColorCurrent = glassViewColorNormal;
        repaint();
    }//GEN-LAST:event_formMouseExited

    /**     Recomputes alll the  layout of the magnifying glass as per dimentions of this container ... */
    void reset() {
        //        cH = getHeight() - getInsets().top - getInsets().bottom;
//        cW = getWidth() - getInsets().left - getInsets().right;

        topGap = cH * 10D / 100;
        //        glassRadii = Math.min( cH * 15D / 100, cW * 15D / 100);
        glassRadii = cH * 20D / 100;
        //        bottomGap = cH * 20D / 100;

        //  Creating glass ...
        RectangleDouble glassCenter = new RectangleDouble();
        glassCenter.x = cW / 2;
        glassCenter.y = topGap + glassRadii;
        glass = new Ellipse2D.Double(glassCenter.x - glassRadii, glassCenter.y - glassRadii,
            glassRadii * 2, glassRadii * 2);
        //        glass = new Ellipse2D.Double( cW*20/100, topGap, cW*60/100, glassRadii * 2);


        RectangleDouble jointBounds = new RectangleDouble();
        jointBounds.height = cH * 5D / 100;
        jointBounds.width = jointBounds.height;
        jointBounds.x = cW / 2 - jointBounds.width / 2;
        jointBounds.y = topGap + glassRadii * 2;
        joint = new Rectangle2D.Double(jointBounds.x, jointBounds.y,
            jointBounds.width, jointBounds.height);

        RectangleDouble handleBounds = new RectangleDouble();
        handleBounds.height = cH * 55D / 100;
        handleBounds.width = handleBounds.height / 4;
        handleBounds.x = cW / 2 - handleBounds.width / 2;
        handleBounds.y = jointBounds.y + jointBounds.height;
        handle = new Rectangle2D.Double(handleBounds.x, handleBounds.y,
            handleBounds.width, handleBounds.height);
        handleShine = new Rectangle2D.Double(handleBounds.x + 2, handleBounds.y + 2,
            handleBounds.width / 2.5, handleBounds.height - 4);


        glassBS = new BasicStroke(cH / 100 + 10);
        scaleFactor = getHeight() / (double) cH;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    /**     Draws Magnifying glass inside the Component as per precomputed specifications...    */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g;
//        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        //        g2.setRenderingHint(  RenderingHints.KEY_ALPHA_INTERPOLATION, 
//                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);

        g2.scale(scaleFactor, scaleFactor);

        if (rotateGlass) {
            g2.translate(cW / 2, cH / 2);
            g2.rotate(rotationAngle);
            g2.translate(-cW / 2, -cH / 2);
        }

        Stroke oldStroke = g2.getStroke();
        g2.setStroke(glassBS);
        Color oldColor = g2.getColor();
        g2.setColor(glassViewColorCurrent);
        g2.fill(glass);
        g2.setColor(oldColor);
        g2.draw(glass);
        g2.fill(joint);
        g2.setColor(handleColor);
        g2.fill(handle);
        g2.setColor(handleShineColor);
        g2.fill(handleShine);

        //  Reset...
//        g2.dispose();
        g2.setStroke( oldStroke);
        if (rotateGlass) {
            g2.translate(cW / 2, cH / 2);
            g2.rotate(-rotationAngle);
            g2.translate(-cW / 2, -cH / 2);
        }
        g2.scale(1/scaleFactor, 1/scaleFactor);
    }

    public static void main(String[] args) {
        JFrame mf = new JFrame("Testing " + MagnifyingButton.class.getName());
        mf.setMinimumSize(new Dimension(0, 0));

        Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
        mf.setBounds(ss.width / 8, ss.height / 8, ss.width * 6 / 8, ss.height * 6 / 8);
        mf.getContentPane().setLayout( new FlowLayout());
        MagnifyingButton mg = new MagnifyingButton("Hi");
        mg.setSize( 15, 10);
        mg.setPreferredSize( mg.getSize());
        mg.setMinimumSize( mg.getSize());
        mg.setMaximumSize( mg.getSize());
        
        mf.getContentPane().add( mg);
        mf.setVisible(true);
    }

    void setupColors() {
        handleShineColor = new Color(193, 105, 17);
        handleColor = new Color(89, 49, 9);
        glassViewColorHighlighted = new Color(225, 175, 175, 100);
        glassViewColorNormal = new Color(176, 209, 211, 150);
        glassViewColorCurrent = glassViewColorNormal;
    }
    
    static class RectangleDouble {

        double x;
        double y;
        double width;
        double height;
    }
}
