/*
 * SheetCustomizationConsole.java
 *
 * Created on November 27, 2007, 5:02 PM
 */
package edu.wustl.cab2b.client.ui.controls.sheet;

import java.beans.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author  jasbir_sachdeva
 */
public class SheetCustomizationConsole extends javax.swing.JPanel {

    SheetCustomizationModel scm;
    ModelListener lsnModel = new ModelListener();
    /** The default width of the first column.  */
    private int defaultChkColumnWith = 75;
    TableColumn colFilter;

    /** Creates new form SheetCustomizationConsole */
    SheetCustomizationConsole() {
        initComponents();
        scm = new SheetCustomizationModel();

        setModel(scm);
    }


    /** Resets the internal staet attibutes of this instance, so
     * that it can be used as fresh. I.e is without any Rows.   */
    private void resetInternalState() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSettings = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btAddCol = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cbShowFiltersHere = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        tblSettings.setAutoCreateRowSorter(true);
        tblSettings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblSettings);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        btAddCol.setText("Add User Column"); // NOI18N
        btAddCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddColActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 3);
        jPanel2.add(btAddCol, gridBagConstraints);

        jButton3.setText("Reset All"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
    
       
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 3);
        jPanel2.add(jButton3, gridBagConstraints);

        //Commenting the checkbox for the bug fix : 7744
        //Hiding the check box  
      /*  cbShowFiltersHere.setText("Show Filters"); // NOI18N
        cbShowFiltersHere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbShowFiltersHereActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 3);
        jPanel2.add(cbShowFiltersHere, gridBagConstraints);
*/
        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    private void btAddColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddColActionPerformed
        // TODO add your handling code here:
        scm.requestAddUserColumn();
    }//GEN-LAST:event_btAddColActionPerformed

    private void cbShowFiltersHereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbShowFiltersHereActionPerformed
        // TODO add your handling code here:
        adjustFilterColVisibility();
}//GEN-LAST:event_cbShowFiltersHereActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        scm.requestResetAll();

    }//GEN-LAST:event_jButton3ActionPerformed

    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new SheetTestFrame().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddCol;
    private javax.swing.JCheckBox cbShowFiltersHere;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSettings;
    // End of variables declaration//GEN-END:variables
    
    void setModel(SheetCustomizationModel scm) {
        this.scm.removePropertyChangeListener(lsnModel);
        this.scm = scm;
        colFilter = null;
        tblSettings.setModel(scm);
        tblSettings.getColumnModel().getColumn(3).setCellRenderer(new FilterColumnCellRenderer());
        adjustFilterColVisibility();
        scm.addPropertyChangeListener(lsnModel);
        readjustColumnHeadersWidth();
    }

    private void readjustColumnHeadersWidth() {
        tblSettings.getColumnModel().getColumn(0).setMaxWidth( 25);
        tblSettings.getColumnModel().getColumn(1).setWidth( 90);
        tblSettings.getColumnModel().getColumn(2).setMaxWidth( 60);
        tblSettings.revalidate();
        tblSettings.repaint();
    }
    
    void adjustFilterColVisibility(){
        if( cbShowFiltersHere.isSelected())
            showFilterColumn();
        else
            hideFilterColumn();
    }
    
    
    void hideFilterColumn(){
        if( null != colFilter)
            //  Already removed!
            return;
        colFilter = tblSettings.getColumnModel().getColumn(3);
        tblSettings.getColumnModel().removeColumn( colFilter);
        tblSettings.setRowHeight(16);
    }
    
    void showFilterColumn(){
        if( null == colFilter)
            //  Nothing to Add!
            return;
        tblSettings.getColumnModel().addColumn( colFilter);
        colFilter = null;
        tblSettings.setRowHeight(75);
    }
    
    /** Listens to the Changes in the Underlying Data Model.
     * Possible change are Addition of Column, Change of Model index....
     */
    class ModelListener implements PropertyChangeListener {

        public void propertyChange(PropertyChangeEvent evt) {
            //  For any changes in Model, update table...
            tblSettings.revalidate();
            repaint();
        }
    }

    class FilterColumnCellRenderer extends DefaultTableCellRenderer {

        ColumnFilterVerticalConsole columnFilterVerticalConsole = new ColumnFilterVerticalConsole();
        
        FilterColumnCellRenderer(){
            //  to show in Table move some components...
            columnFilterVerticalConsole.setHeader(null);
        }

        @Override
        public JComponent getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            columnFilterVerticalConsole.setModel((ColumnFilterModel<Comparable>) value);
            columnFilterVerticalConsole.changeOrientationToHorizontal();
            return columnFilterVerticalConsole;
        }
    }
}
